{"name": "794_C. Naming Company", "description": "Input\n\nThe first line of input contains a string s of length n (1 <= n <= 3\u00b7105). All characters of the string are lowercase English letters. This string denotes the set of letters Oleg has initially.\n\nThe second line of input contains a string t of length n. All characters of the string are lowercase English letters. This string denotes the set of letters Igor has initially.", "grammar": {"productions": ["<S>->[a-z]{1,3*10^5} <n> [a-z]{1,3*10^5}"], "constraints": [""]}}
{"name": "124_D. Squares", "description": "Input\n\nThe only line contains integers a, b, x1, y1, x2 and y2 --- the parameters of the bad squares, the coordinates of the initial and the final squares correspondingly (2 <= a, b <= 109 and |x1|,|y1|,|x2|,|y2| <= 109). It is guaranteed that the initial and the final square aren't bad.", "grammar": {"productions": ["<S>->a <s> b <s> x1 <s> y1 <s> x2 <s> y2"], "constraints": ["2<=a<=10^9", "2<=b<=10^9", "1<=x1,y1,x2,y2<=10^9"]}}
{"name": "p02606 AIsing Programming Contest 2020 - Number of Multiples", "description": "How many multiples of d are there among the integers between L and R (inclusive)?\n\nConstraints\n\n* All values in input are integers.\n* 1 \\leq L \\leq R \\leq 100\n* 1 \\leq d \\leq 100\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nL R d", "grammar": {"productions": ["<S>->L <s> R <s> d"], "constraints": ["1<=L<=R<=100", "1<=d<=100"]}}
{"name": "p03705 AtCoder Grand Contest 015 - A+...+B Problem", "description": "Snuke has N integers. Among them, the smallest is A, and the largest is B. We are interested in the sum of those N integers. How many different possible sums there are?\n\nConstraints\n\n* 1 \u2264 N,A,B \u2264 10^9\n* A and B are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN A B", "grammar": {"productions": ["<S>->N <s> A <s> B"], "constraints": ["1<=N<=10^9", "1<=A<=10^9", "1<=B<=10^9"]}}
{"name": "112_A. Petya and Strings", "description": "Little Petya loves presents. His mum bought him two strings of the same size for his birthday. The strings consist of uppercase and lowercase Latin letters. Now Petya wants to compare those two strings lexicographically. The letters' case does not matter, that is an uppercase letter is considered equivalent to the corresponding lowercase letter. Help Petya perform the comparison.\n\nInput\n\nEach of the first two lines contains a bought string. The strings' lengths range from 1 to 100 inclusive. It is guaranteed that the strings are of the same length and also consist of uppercase and lowercase Latin letters.", "grammar": {"productions": ["<S>->[a-zA-Z]{S} <n> [a-zA-Z]{S}"], "constraints": ["0<S<=100"]}}
{"name": "964_A. Splits", "description": "Input\n\nThe first line contains one integer n (1 <= n <= 10^9).", "grammar": {"productions": ["<S>->n"], "constraints": ["1<=n<=10^9"]}}
{"name": "70_A. Cookies", "description": "Input\n\nThe first line contains a single integer n (0 <= n <= 1000).", "grammar": {"productions": ["<S>->n"], "constraints": ["0<=n<=1000"]}}
{"name": "1054_A. Elevator or Stairs?", "description": "Input\n\nThe only line contains six integers x, y, z, t_1, t_2, t_3 (1 <= x, y, z, t_1, t_2, t_3 <= 1000) --- the floor Masha is at, the floor Masha wants to get to, the floor the elevator is located on, the time it takes Masha to pass between two floors by stairs, the time it takes the elevator to pass between two floors and the time it takes for the elevator to close or open the doors.\n\nIt is guaranteed that x != y.", "grammar": {"productions": ["<S>->x <s> y <s> z <s> t1 <s> t2 <s> t3"], "constraints": ["1<=x,y,z,t1,t2,t3<=1000", "x!=y"]}}
{"name": "137_E. Last Chance", "description": "Input\n\nThe only input line contains a non-empty string s consisting of no more than 2\u00b7105 uppercase and lowercase Latin letters. We shall regard letters \"a\", \"e\", \"i\", \"o\", \"u\" and their uppercase variants as vowels.", "grammar": {"productions": ["<S>->[a-zA-Z]{1,200000}"], "constraints": [""]}}
{"name": "p02629 AtCoder Beginner Contest 171 - One Quadrillion and One Dalmatians", "description": "1000000000000001 dogs suddenly appeared under the roof of Roger's house, all of which he decided to keep. The dogs had been numbered 1 through 1000000000000001, but he gave them new names, as follows:\n\n* the dogs numbered 1,2,\\cdots,26 were respectively given the names `a`, `b`, ..., `z`;\n* the dogs numbered 27,28,29,\\cdots,701,702  were respectively given the names `aa`, `ab`, `ac`, ..., `zy`, `zz`;\n* the dogs numbered 703,704,705,\\cdots,18277,18278  were respectively given the names `aaa`, `aab`, `aac`, ..., `zzy`, `zzz`;\n* the dogs numbered 18279,18280,18281,\\cdots,475253,475254  were respectively given the names `aaaa`, `aaab`, `aaac`, ..., `zzzy`, `zzzz`;\n* the dogs numbered 475255,475256,\\cdots  were respectively given the names `aaaaa`, `aaaab`, ...;\n* and so on.\n\n\n\nTo sum it up, the dogs numbered 1, 2, \\cdots were respectively given the following names:\n\n`a`, `b`, ..., `z`, `aa`, `ab`, ..., `az`, `ba`, `bb`, ..., `bz`, ..., `za`, `zb`, ..., `zz`, `aaa`, `aab`, ..., `aaz`, `aba`, `abb`, ..., `abz`, ..., `zzz`, `aaaa`, ...\n\nNow, Roger asks you:\n\n\"What is the name for the dog numbered N?\"\n\nConstraints\n\n* N is an integer.\n* 1 \\leq N \\leq 1000000000000001\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN", "grammar": {"productions": ["<S>->N"], "constraints": ["1<=N<=1000000000000001"]}}
{"name": "1020_C. Elections", "description": "Input\n\nThe first line of input contains two integers n and m (1 <= n, m <= 3000) --- the number of voters and the number of parties respectively.\n\nEach of the following n lines contains two integers p_i and c_i (1 <= p_i <= m, 1 <= c_i <= 10^9) --- the index of this voter's preferred party and the number of bytecoins needed for him to reconsider his decision.\n\nThe United Party of Berland has the index 1.", "grammar": {"productions": ["<S>->[n] <s> [m] <n> <T_n>", "<T_i>-><T_i-1> <n> p_i <s> c_i", "<T_1>->p_i <s> c_i"], "constraints": ["1<=n,m<=3000", "1<=p_i<=m", "1<=c_i<=10^9"]}}
{"name": "34_A. Reconnaissance 2", "description": "n soldiers stand in a circle. For each soldier his height ai is known. A reconnaissance unit can be made of such two neighbouring soldiers, whose heights difference is minimal, i.e. |ai - aj| is minimal. So each of them will be less noticeable with the other. Output any pair of soldiers that can form a reconnaissance unit.\n\nInput\n\nThe first line contains integer n (2 \u2264 n \u2264 100) \u2014 amount of soldiers. Then follow the heights of the soldiers in their order in the circle \u2014 n space-separated integers a1, a2, ..., an (1 \u2264 ai \u2264 1000). The soldier heights are given in clockwise or counterclockwise direction.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1"], "constraints": ["2<=n<=100", "1<=a_i<=1000"]}}
{"name": "p03011 AtCoder Beginner Contest 129 - Airplane", "description": "There are three airports A, B and C, and flights between each pair of airports in both directions.\n\nA one-way flight between airports A and B takes P hours, a one-way flight between airports B and C takes Q hours, and a one-way flight between airports C and A takes R hours.\n\nConsider a route where we start at one of the airports, fly to another airport and then fly to the other airport.\n\nWhat is the minimum possible sum of the flight times?\n\nConstraints\n\n* 1 \\leq P,Q,R \\leq 100\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nP Q R", "grammar": {"productions": ["<S>->P <s> Q <s> R"], "constraints": ["1<=P<=100", "1<=Q<=100", "1<=R<=100"]}}
{"name": "1197_A. DIY Wooden Ladder", "description": "Let's denote a k-step ladder as the following structure: exactly k + 2 wooden planks, of which\n\n  * two planks of length at least k+1 \u2014 the base of the ladder; \n  * k planks of length at least 1 \u2014 the steps of the ladder; \n\n\n\nNote that neither the base planks, nor the steps planks are required to be equal.\n\nFor example, ladders 1 and 3 are correct 2-step ladders and ladder 2 is a correct 1-step ladder. On the first picture the lengths of planks are [3, 3] for the base and [1] for the step. On the second picture lengths are [3, 3] for the base and [2] for the step. On the third picture lengths are [3, 4] for the base and [2, 3] for the steps. \n\n<image>\n\nYou have n planks. The length of the i-th planks is a_i. You don't have a saw, so you can't cut the planks you have. Though you have a hammer and nails, so you can assemble the improvised \"ladder\" from the planks.\n\nThe question is: what is the maximum number k such that you can choose some subset of the given planks and assemble a k-step ladder using them?\n\nInput\n\nThe first line contains a single integer T (1 \u2264 T \u2264 100) \u2014 the number of queries. The queries are independent.\n\nEach query consists of two lines. The first line contains a single integer n (2 \u2264 n \u2264 10^5) \u2014 the number of planks you have.\n\nThe second line contains n integers a_1, a_2, ..., a_n (1 \u2264 a_i \u2264 10^5) \u2014 the lengths of the corresponding planks.\n\nIt's guaranteed that the total number of planks from all queries doesn't exceed 10^5.", "grammar": {"productions": ["<S>->[T] <n> <T_T>", "<T_i>-><T_i-1> <n> [n] <n> <L_n>", "<T_1>->[n] <n> <L_n>", "<L_i>-><L_i-1> <s> a_i", "<L_1>->a_1"], "constraints": ["1<=T<=100", "2<=n<=10^5", "1<=a_i<=10^5"]}}
{"name": "80_C. Heroes", "description": "Input\n\nThe first line contains a single non-negative integer n (0 <= n <= 42) --- amount of liking between the heroes. Next n lines describe liking in the form \"p likes q\", meaning that the hero p likes the hero q (p !=  q). Every liking is described in the input exactly once, no hero likes himself.\n\nIn the last line are given three integers a, b and c (1 <= a, b, c <= 2\u00b7109), separated by spaces: the experience for Mephisto, the experience for Diablo and experience for Baal.\n\nIn all the pretests, except for examples from the statement, the following condition is satisfied: a = b = c.", "grammar": {"productions": ["<S>->[n] <n> <T_n> <n> a <s> b <s> c", "<T_i>-><T_i-1> <n> [a-z]{1,10^5} <s> likes <s> [a-z]{1,10^5}", "<T_1>->[a-z]{1,10^5} <s> likes <s> [a-z]{1,10^5}"], "constraints": ["0<=n<=42", "1<=a,b,c<=2*10^9"]}}
{"name": "691_D. Swaps in Permutation", "description": "Input\n\nThe first line contains two integers n and m (1 <= n, m <= 106) --- the length of the permutation p and the number of pairs of positions.\n\nThe second line contains n distinct integers pi (1 <= pi <= n) --- the elements of the permutation p.\n\nEach of the last m lines contains two integers (aj, bj) (1 <= aj, bj <= n) --- the pairs of positions to swap. Note that you are given a positions, not the values to swap.", "grammar": {"productions": ["<S>->[n] <s> [m] <n> <P_n> <n> <T_m>", "<P_i>-><P_i-1> <s> p_i", "<P_1>->p_1", "<T_i>-><T_i-1> <n> a_i <s> b_i", "<T_1>->a_1 <s> b_1"], "constraints": ["1<=n,m<=10^6", "1<=p_i<=n", "1<=a_i,b_i<=n"]}}
{"name": "p03771 AtCoder Grand Contest 012 - Camel and Oases", "description": "Constraints\n\n* 2 <= N,V <= 2 \u00d7 10^5\n* -10^9 <= x_1 < x_2 < ... < x_N <= 10^9\n* V and x_i are all integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN V\nx_1 x_2 ... x_{N}", "grammar": {"productions": ["<S>->[N] <s> V <n> <T_N>", "<T_i>-><T_i-1> <s> x_i", "<T_1>->x_1"], "constraints": ["2<=N,V<=2*10^5", "-10^9<=x_i<=10^9"]}}
{"name": "405_E. Graph Cutting", "description": "Input\n\nThe first line of input contains two space-separated integers n and m (1 <= n, m <= 105), the number of vertices and the number of edges in the graph. The next m lines contain the description of the graph's edges. The i-th line contains two space-separated integers ai and bi (1 <= ai, bi <= n; ai != bi), the numbers of the vertices connected by the i-th edge. It is guaranteed that the given graph is simple (without self-loops and multi-edges) and connected.\n\nNote: since the size of the input and output could be very large, don't use slow output techniques in your language. For example, do not use input and output streams (cin, cout) in C++.", "grammar": {"productions": ["<S>->[n] <s> [m] <n> <T_m>", "<T_i>-><T_i-1> <n> a_i <s> b_i", "<T_1>->a_1 <s> b_1"], "constraints": ["1<=n,m<=105", "1<=a_i,b_i<=n"]}}
{"name": "1139_E. Maximize Mex", "description": "Input\n\nThe first line contains two integers n and m (1 <= m <= n <= 5000), the number of students and the number of clubs in college.\n\nThe second line contains n integers p_1, p_2, ..., p_n (0 <= p_i < 5000), where p_i is the potential of the i-th student.\n\nThe third line contains n integers c_1, c_2, ..., c_n (1 <= c_i <= m), which means that i-th student is initially a member of the club with index c_i.\n\nThe fourth line contains an integer d (1 <= d <= n), number of days for which the director wants to know the maximum possible strength of the team. \n\nEach of the next d lines contains an integer k_i (1 <= k_i <= n), which means that k_i-th student lefts their club on the i-th day. It is guaranteed, that the k_i-th student has not left their club earlier.", "grammar": {"productions": ["<S>->[n] <s> m <n> <T_n> <n> <L_n> <n> [d] <n> <Z_d>", "<T_i>-><T_i-1> <s> p_i", "<T_1>->p_1", "<L_i>-><L_i-1> <s> c_i", "<L_1>->c_1", "<T_m>->[1-9]{1} <L_m-1> <n> [c_i]", "<Z_i>-><Z_i-1> <n> k_i", "<Z_1>->k_1"], "constraints": ["1<=m<=n<=5000", "0<=p_i<5000", "1<=c_i<=m", "1<=d<=n", "1<=k_i<=n"]}}
{"name": "p00991 Grid", "description": "Input\n\nThe input is given in the following format.\n\n\nr c a1 a2 b1 b2\n\n\nInput meets the following constraints\n1 <= r, c <= 1,000\n0 <= a1, b1 <r\n0 <= a2, b2 <c", "grammar": {"productions": ["<S>->[r] <s> [c] <s> a1 <s> a2 <s> b1 <s> b2"], "constraints": ["1<=r,c<=1000", "0<=a1,b1<r", "0<=a2,b2<c"]}}
{"name": "p02933 AtCoder Beginner Contest 138 - Red or Not", "description": "You will be given an integer a and a string s consisting of lowercase English letters as input.\n\nWrite a program that prints s if a is not less than 3200 and prints `red` if a is less than 3200.\n\nConstraints\n\n* 2800 \\leq a < 5000\n* s is a string of length between 1 and 10 (inclusive).\n* Each character of s is a lowercase English letter.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\na\ns", "grammar": {"productions": ["<S>->a <n> [a-z]{1,10}"], "constraints": ["2800<=a<=5000"]}}
{"name": "1269_B. Modulo Equality", "description": "Input\n\nThe first line contains two integers n,m (1 <= n <= 2000, 1 <= m <= 10^9): number of elemens in arrays and m.\n\nThe second line contains n integers a_1, a_2, ..., a_n (0 <= a_i < m).\n\nThe third line contains n integers b_1, b_2, ..., b_n (0 <= b_i < m).\n\nIt is guaranteed that there exists some non-negative integer x, such that it would be possible to find some permutation p_1, p_2, ..., p_n such that (a_i + x) mod m = b_{p_i}.", "grammar": {"productions": ["<S>->[n] <s> [m] <n> <T_n> <n> <L_n>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1", "<L_i>-><L_i-1> <s> b_i", "<L_1>->b_1"], "constraints": ["1<=n<=2000", "1<=m<=10^9", "0<=a_i<m", "0<=b_i<m"]}}
{"name": "536_C. Tavas and Pashmaks", "description": "Input\n\nThe first line of input contains a single integer n (1 <= n <= 2 \u00d7 105).\n\nThe next n lines contain the details of competitors. i-th line contains two integers si and ri (1 <= si, ri <= 104).", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <n> si <s> ri", "<T_1>->si <s> ri"], "constraints": ["1<=n<=2*10^5", "1<=si,ri<=10^4"]}}
{"name": "461_A. Appleman and Toastman", "description": "Appleman and Toastman play a game. Initially Appleman gives one group of n numbers to the Toastman, then they start to complete the following tasks:\n\n  * Each time Toastman gets a group of numbers, he sums up all the numbers and adds this sum to the score. Then he gives the group to the Appleman. \n  * Each time Appleman gets a group consisting of a single number, he throws this group out. Each time Appleman gets a group consisting of more than one number, he splits the group into two non-empty groups (he can do it in any way) and gives each of them to Toastman. \n\n\n\nAfter guys complete all the tasks they look at the score value. What is the maximum possible value of score they can get?\n\nInput\n\nThe first line contains a single integer n (1 \u2264 n \u2264 3\u00b710^5). The second line contains n integers a1, a2, ..., an (1 \u2264 ai \u2264 10^6) \u2014 the initial group that is given to Toastman.", "grammar": {"productions": ["<S>->[N] <n> <T_N>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1"], "constraints": ["1<=N<=3*10^5", "1<=a_i<=10^6"]}}
{"name": "p02631 AtCoder Beginner Contest 171 - Red Scarf", "description": "There are N Snuke Cats numbered 1, 2, \\ldots, N, where N is even.\n\nEach Snuke Cat wears a red scarf, on which his favorite non-negative integer is written.\n\nRecently, they learned the operation called xor (exclusive OR).\n\nWhat is xor?\n\nFor n non-negative integers x_1, x_2, \\ldots, x_n, their xor, x_1~\\textrm{xor}~x_2~\\textrm{xor}~\\ldots~\\textrm{xor}~x_n is defined as follows:\n\n* When x_1~\\textrm{xor}~x_2~\\textrm{xor}~\\ldots~\\textrm{xor}~x_n is written in base two, the digit in the 2^k's place (k \\geq 0) is 1 if the number of integers among x_1, x_2, \\ldots, x_n whose binary representations have 1 in the 2^k's place is odd, and 0 if that count is even.\n\nFor example, 3~\\textrm{xor}~5 = 6.\n\nThey wanted to use this operation quickly, so each of them calculated the xor of the integers written on their scarfs except his scarf.\n\nWe know that the xor calculated by Snuke Cat i, that is, the xor of the integers written on the scarfs except the scarf of Snuke Cat i is a_i. Using this information, restore the integer written on the scarf of each Snuke Cat.\n\nConstraints\n\n* All values in input are integers.\n* 2 \\leq N \\leq 200000\n* N is even.\n* 0 \\leq a_i \\leq 10^9\n* There exists a combination of integers on the scarfs that is consistent with the given information.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\na_1 a_2 \\ldots a_N", "grammar": {"productions": ["<S>->[N] <n> <T_N>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1"], "constraints": ["2<=N<=200000", "0<=a_i<=10^9", "N is even"]}}
{"name": "779_B. Weird Rounding", "description": "Input\n\nThe only line of the input contains two integer numbers n and k (0 <= n <= 2 000 000 000, 1 <= k <= 9).\n\nIt is guaranteed that the answer exists. All numbers in the input are written in traditional notation of integers, that is, without any extra leading zeros.", "grammar": {"productions": ["<S>->n <s> k"], "constraints": ["0<=n<=2000000000", "1<=k<=9"]}}
{"name": "614_C. Peter and Snow Blower", "description": "Input\n\nThe first line of the input contains three integers --- the number of vertices of the polygon n (<image>), and coordinates of point P.\n\nEach of the next n lines contains two integers --- coordinates of the vertices of the polygon in the clockwise or counterclockwise order. It is guaranteed that no three consecutive vertices lie on a common straight line.\n\nAll the numbers in the input are integers that do not exceed 1 000 000 in their absolute value.", "grammar": {"productions": ["<S>->Px <s> Py <n> <T_Px>", "<T_i>-><T_i-1> <n> X <s> Y", "<T_1>->X <s> Y"], "constraints": ["3<=Px<=1000000", "-1000000<=Py,X,Y<=1000000"]}}
{"name": "802_C. Heidi and Library (hard)", "description": "Input\n\nThe first line of input will contain two integers n and k (<image>). The second line will contain n integers a1, a2, ..., an (1 <= ai <= n) -- the sequence of book requests. The third line contains n integers c1, c2, ..., cn (0 <= ci <= 106) -- the costs of the books.", "grammar": {"productions": ["<S>->[n] <s> k <n> <T_n> <n> <L_n>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1", "<L_i>-><L_i-1> <s> c_i", "<L_1>->c_1"], "constraints": ["1<=a_i<=n", "0<=c_i<=10^6"]}}
{"name": "1141_C. Polycarp Restores Permutation", "description": "An array of integers p_1, p_2, ..., p_n is called a permutation if it contains each number from 1 to n exactly once. For example, the following arrays are permutations: [3, 1, 2], [1], [1, 2, 3, 4, 5] and [4, 3, 1, 2]. The following arrays are not permutations: [2], [1, 1], [2, 3, 4].\n\nPolycarp invented a really cool permutation p_1, p_2, ..., p_n of length n. It is very disappointing, but he forgot this permutation. He only remembers the array q_1, q_2, ..., q_{n-1} of length n-1, where q_i=p_{i+1}-p_i.\n\nGiven n and q=q_1, q_2, ..., q_{n-1}, help Polycarp restore the invented permutation.\n\nInput\n\nThe first line contains the integer n (2 \u2264 n \u2264 2\u22c510^5) \u2014 the length of the permutation to restore. The second line contains n-1 integers q_1, q_2, ..., q_{n-1} (-n < q_i < n).", "grammar": {"productions": ["<S>->[n] <n> <T_n-1>", "<T_i>-><T_i-1> <s> q_i", "<T_1>->q_1"], "constraints": ["2<=n<=2*10^5", "-n<q_i<n"]}}
{"name": "897_A. Scarborough Fair", "description": "Are you going to Scarborough Fair?\n\nParsley, sage, rosemary and thyme.\n\nRemember me to one who lives there.\n\nHe once was the true love of mine.\n\nWillem is taking the girl to the highest building in island No.28, however, neither of them knows how to get there.\n\nWillem asks his friend, Grick for directions, Grick helped them, and gave them a task.\n\nAlthough the girl wants to help, Willem insists on doing it by himself.\n\nGrick gave Willem a string of length n.\n\nWillem needs to do m operations, each operation has four parameters l, r, c1, c2, which means that all symbols c1 in range [l, r] (from l-th to r-th, including l and r) are changed into c2. String is 1-indexed.\n\nGrick wants to know the final string after all the m operations.\n\nInput\n\nThe first line contains two integers n and m (1 \u2264 n, m \u2264 100).\n\nThe second line contains a string s of length n, consisting of lowercase English letters.\n\nEach of the next m lines contains four parameters l, r, c1, c2 (1 \u2264 l \u2264 r \u2264 n, c1, c2 are lowercase English letters), separated by space.", "grammar": {"productions": ["<S>->[n] <s> m <n> [a-z]{n} <n> l <s> r <s> [a-z]{1} <s> [a-z]{1}"], "constraints": ["1<=n,m<=100", "1<=l<=r<=n"]}}
{"name": "p01076 Graph Making", "description": "Constraints\n\n* 2 <= n <= 109\n* 1 <= d <= n-1\n\nInput\n\n\nn d\n\n\nTwo integers n and d are given on one line, separated by blanks.", "grammar": {"productions": ["<S>->n <s> d"], "constraints": ["2<=n<=10^9", "1<=d<=n-1"]}}
{"name": "p02697 AtCoder Beginner Contest 165 - Rotation Matching", "description": "You are going to hold a competition of one-to-one game called AtCoder Janken. (Janken is the Japanese name for Rock-paper-scissors.) N players will participate in this competition, and they are given distinct integers from 1 through N. The arena has M playing fields for two players. You need to assign each playing field two distinct integers between 1 and N (inclusive). You cannot assign the same integer to multiple playing fields. The competition consists of N rounds, each of which proceeds as follows:\n\n* For each player, if there is a playing field that is assigned the player's integer, the player goes to that field and fight the other player who comes there.\n* Then, each player adds 1 to its integer. If it becomes N+1, change it to 1.\n\n\n\nYou want to ensure that no player fights the same opponent more than once during the N rounds. Print an assignment of integers to the playing fields satisfying this condition. It can be proved that such an assignment always exists under the constraints given.\n\nConstraints\n\n* 1 \\leq M\n* M \\times 2 +1 \\leq N \\leq 200000\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN M", "grammar": {"productions": ["<S>->N <s> M"], "constraints": ["1<=M", "M*2+1<=N<=200000"]}}
{"name": "p03943 AtCoder Beginner Contest 047 - Fighting over Candies", "description": "Two students of AtCoder Kindergarten are fighting over candy packs.\n\nThere are three candy packs, each of which contains a, b, and c candies, respectively.\n\nTeacher Evi is trying to distribute the packs between the two students so that each student gets the same number of candies. Determine whether it is possible.\n\nNote that Evi cannot take candies out of the packs, and the whole contents of each pack must be given to one of the students.\n\nConstraints\n\n* 1 \u2266 a, b, c \u2266 100\n\nInput\n\nThe input is given from Standard Input in the following format:\n\n\na b c", "grammar": {"productions": ["<S>->a <s> b <s> c"], "constraints": ["1<=a,b,c<=100"]}}
{"name": "6_A. Triangle", "description": "Johnny has a younger sister Anne, who is very clever and smart. As she came home from the kindergarten, she told his brother about the task that her kindergartener asked her to solve. The task was just to construct a triangle out of four sticks of different colours. Naturally, one of the sticks is extra. It is not allowed to break the sticks or use their partial length. Anne has perfectly solved this task, now she is asking Johnny to do the same.\n\nThe boy answered that he would cope with it without any difficulty. However, after a while he found out that different tricky things can occur. It can happen that it is impossible to construct a triangle of a positive area, but it is possible to construct a degenerate triangle. It can be so, that it is impossible to construct a degenerate triangle even. As Johnny is very lazy, he does not want to consider such a big amount of cases, he asks you to help him.\n\nInput\n\nThe first line of the input contains four space-separated positive integer numbers not exceeding 100 \u2014 lengthes of the sticks.", "grammar": {"productions": ["<S>->a <s> b <s> c <s> d"], "constraints": ["1<=a<=100", "1<=b<=100", "1<=c<=100", "1<=d<=100"]}}
{"name": "630_R. Game", "description": "Input\n\nThe only line of the input contains one integer n (1 <= n <=10^18) --- the size of the field.", "grammar": {"productions": ["<S>->n"], "constraints": ["1<=n<=10^18"]}}
{"name": "554_E. Love Triangles", "description": "Input\n\nThe first line of input will contain two integers n, m (3 <= n <= 100 000, 0 <= m <= 100 000).\n\nThe next m lines will contain the description of the known relationships. The i-th line will contain three integers ai, bi, ci. If ci is 1, then ai and bi are in love, otherwise, they hate each other (1 <= ai, bi <= n, ai != bi, <image>).\n\nEach pair of people will be described no more than once.", "grammar": {"productions": ["<S>->[n] <s> [m] <n> <T_m>", "<T_i>-><T_i-1> <n> a_i <s> b_i <s> [01]{1}", "<T_1>->a_1 <s> b_1 <s> [01]{1}"], "constraints": ["3<=n<=100000", "0<=m<=100000", "1<=a_i<=n", "1<=b_i<=n", "a_i!=b_i"]}}
{"name": "p02807 Dwango Programming Contest 6th - Fusing Slimes", "description": "There are N slimes standing on a number line. The i-th slime from the left is at position x_i.\n\nIt is guaruanteed that 1 \\leq x_1 < x_2 < \\ldots < x_N \\leq 10^{9}.\n\nNiwango will perform N-1 operations. The i-th operation consists of the following procedures:\n\n* Choose an integer k between 1 and N-i (inclusive) with equal probability.\n* Move the k-th slime from the left, to the position of the neighboring slime to the right.\n* Fuse the two slimes at the same position into one slime.\n\n\n\nFind the total distance traveled by the slimes multiplied by (N-1)! (we can show that this value is an integer), modulo (10^{9}+7). If a slime is born by a fuse and that slime moves, we count it as just one slime.\n\nConstraints\n\n* 2 \\leq N \\leq 10^{5}\n* 1 \\leq x_1 < x_2 < \\ldots < x_N \\leq 10^{9}\n* x_i is an integer.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\nx_1 x_2 \\ldots x_N", "grammar": {"productions": ["<S>->[N] <n> <T_N>", "<T_i>-><T_i-1> <s> x_i", "<T_1>->x_1"], "constraints": ["1<=N<=10^5", "1<=x_i<=10^9"]}}
{"name": "747_C. Servers", "description": "Input\n\nThe first line contains two positive integers n and q (1 <= n <= 100, 1 <= q <= 105) --- the number of servers and the number of tasks. \n\nNext q lines contains three integers each, the i-th line contains integers ti, ki and di (1 <= ti <= 106, 1 <= ki <= n, 1 <= di <= 1000) --- the moment in seconds in which the i-th task will come, the number of servers needed to perform it, and the time needed to perform this task in seconds. The tasks are given in a chronological order and they will come in distinct seconds.", "grammar": {"productions": ["<S>->[n] <s> [q] <n> <T_q>", "<T_i>-><T_i-1> <n> ti <s> ki <s> di", "<T_1>->ti <s> ki <s> di"], "constraints": ["1<=n<=100", "1<=q<=105", "1<=ti<=106", "1<=ki<=n", "1<=di<=1000"]}}
{"name": "1086_B. Minimum Diameter Tree", "description": "Input\n\nThe first line contains two integer numbers n and s (2 <= n <= 10^5, 1 <= s <= 10^9) --- the number of vertices in the tree and the sum of edge weights.\n\nEach of the following n-1 lines contains two space-separated integer numbers a_i and b_i (1 <= a_i, b_i <= n, a_i != b_i) --- the indexes of vertices connected by an edge. The edges are undirected.\n\nIt is guaranteed that the given edges form a tree.", "grammar": {"productions": ["<S>->[n] <s> s <n> <T_n-1>", "<T_i>-><T_i-1> <n> a_i <s> b_i", "<T_1>->a_1 <s> b_1"], "constraints": ["2<=n<=10^5", "1<=s<=10^9", "1<=a_i,b_i<=n"]}}
{"name": "p03838 AtCoder Grand Contest 008 - Simple Calculator", "description": "Snuke has a calculator. It has a display and two buttons.\n\nInitially, the display shows an integer x. Snuke wants to change this value into another integer y, by pressing the following two buttons some number of times in arbitrary order:\n\n* Button A: When pressed, the value on the display is incremented by 1.\n* Button B: When pressed, the sign of the value on the display is reversed.\n\n\n\nFind the minimum number of times Snuke needs to press the buttons to achieve his objective. It can be shown that the objective is always achievable regardless of the values of the integers x and y.\n\nConstraints\n\n* x and y are integers.\n* |x|, |y| \u2264 10^9\n* x and y are different.\n\nInput\n\nThe input is given from Standard Input in the following format:\n\n\nx y", "grammar": {"productions": ["<S>->x <s> y"], "constraints": ["-10^9<=x,y<=10^9"]}}
{"name": "p02728 AtCoder Beginner Contest 160 - Distributing Integers", "description": "We have a tree with N vertices numbered 1 to N. The i-th edge in this tree connects Vertex a_i and b_i. For each k=1, ..., N, solve the problem below:\n\n* Consider writing a number on each vertex in the tree in the following manner:\n* First, write 1 on Vertex k.\n* Then, for each of the numbers 2, ..., N in this order, write the number on the vertex chosen as follows:\n* Choose a vertex that still does not have a number written on it and is adjacent to a vertex with a number already written on it. If there are multiple such vertices, choose one of them at random.\n* Find the number of ways in which we can write the numbers on the vertices, modulo (10^9+7).\n\nConstraints\n\n* 2 \\leq N \\leq 2 \\times 10^5\n* 1 \\leq a_i,b_i \\leq N\n* The given graph is a tree.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\na_1 b_1\n:\na_{N-1} b_{N-1}", "grammar": {"productions": ["<S>->[N] <n> <T_N-1>", "<T_i>-><T_i-1> <n> a_i <s> b_i", "<T_1>->a_1 <s> b_1"], "constraints": ["2<=N<=200000", "1<=a_i<=N", "1<=b_i<=N"]}}
{"name": "898_F. Restoring the Expression", "description": "Input\n\nThe first line contains a non-empty string consisting of digits. The length of the string does not exceed 106.", "grammar": {"productions": ["<S>->[0-9]{1,10^6}"], "constraints": ["The length of the string does not exceed 10^6"]}}
{"name": "1374_E1. Reading Books (easy version)", "description": "Easy and hard versions are actually different problems, so read statements of both problems completely and carefully.\n\nSummer vacation has started so Alice and Bob want to play and joy, but... Their mom doesn't think so. She says that they have to read some amount of books before all entertainments. Alice and Bob will read each book together to end this exercise faster.\n\nThere are n books in the family library. The i-th book is described by three integers: t_i \u2014 the amount of time Alice and Bob need to spend to read it, a_i (equals 1 if Alice likes the i-th book and 0 if not), and b_i (equals 1 if Bob likes the i-th book and 0 if not).\n\nSo they need to choose some books from the given n books in such a way that:\n\n  * Alice likes at least k books from the chosen set and Bob likes at least k books from the chosen set; \n  * the total reading time of these books is minimized (they are children and want to play and joy as soon a possible). \n\n\n\nThe set they choose is the same for both Alice an Bob (it's shared between them) and they read all books together, so the total reading time is the sum of t_i over all books that are in the chosen set.\n\nYour task is to help them and find any suitable set of books or determine that it is impossible to find such a set.\n\nInput\n\nThe first line of the input contains two integers n and k (1 \u2264 k \u2264 n \u2264 2 \u22c5 10^5).\n\nThe next n lines contain descriptions of books, one description per line: the i-th line contains three integers t_i, a_i and b_i (1 \u2264 t_i \u2264 10^4, 0 \u2264 a_i, b_i \u2264 1), where:\n\n  * t_i \u2014 the amount of time required for reading the i-th book; \n  * a_i equals 1 if Alice likes the i-th book and 0 otherwise; \n  * b_i equals 1 if Bob likes the i-th book and 0 otherwise.", "grammar": {"productions": ["<S>->[n] <s> k <n> <T_n>", "<T_i>-><T_i-1> <n> t_i <s> a_i <s> b_i", "<T_1>->t_1 <s> a_1 <s> b_1"], "constraints": ["1<=k<=n<=2*10^5", "1<=t_i<=10^4", "0<=a_i,b_i<=1"]}}
{"name": "1367_A. Short Substrings", "description": "Alice guesses the strings that Bob made for her.\n\nAt first, Bob came up with the secret string a consisting of lowercase English letters. The string a has a length of 2 or more characters. Then, from string a he builds a new string b and offers Alice the string b so that she can guess the string a.\n\nBob builds b from a as follows: he writes all the substrings of length 2 of the string a in the order from left to right, and then joins them in the same order into the string b.\n\nFor example, if Bob came up with the string a=\"abac\", then all the substrings of length 2 of the string a are: \"ab\", \"ba\", \"ac\". Therefore, the string b=\"abbaac\".\n\nYou are given the string b. Help Alice to guess the string a that Bob came up with. It is guaranteed that b was built according to the algorithm given above. It can be proved that the answer to the problem is unique.\n\nInput\n\nThe first line contains a single positive integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases in the test. Then t test cases follow.\n\nEach test case consists of one line in which the string b is written, consisting of lowercase English letters (2 \u2264 |b| \u2264 100) \u2014 the string Bob came up with, where |b| is the length of the string b. It is guaranteed that b was built according to the algorithm given above.", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> [a-z]{2,100}", "<T_1>->[a-z]{2,100}"], "constraints": ["1<=t<=1000"]}}
{"name": "195_B. After Training", "description": "Input\n\nThe first line contains two space-separated integers n, m (1 <= n, m <= 105) --- the number of balls and baskets, correspondingly.", "grammar": {"productions": ["<S>->n <s> m"], "constraints": ["1<=n,m<=10^5"]}}
{"name": "1225_B1. TV Subscriptions (Easy Version)", "description": "The only difference between easy and hard versions is constraints.\n\nThe BerTV channel every day broadcasts one episode of one of the k TV shows. You know the schedule for the next n days: a sequence of integers a_1, a_2, ..., a_n (1 \u2264 a_i \u2264 k), where a_i is the show, the episode of which will be shown in i-th day.\n\nThe subscription to the show is bought for the entire show (i.e. for all its episodes), for each show the subscription is bought separately.\n\nHow many minimum subscriptions do you need to buy in order to have the opportunity to watch episodes of purchased shows d (1 \u2264 d \u2264 n) days in a row? In other words, you want to buy the minimum number of TV shows so that there is some segment of d consecutive days in which all episodes belong to the purchased shows.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases in the input. Then t test case descriptions follow.\n\nThe first line of each test case contains three integers n, k and d (1 \u2264 n \u2264 100, 1 \u2264 k \u2264 100, 1 \u2264 d \u2264 n). The second line contains n integers a_1, a_2, ..., a_n (1 \u2264 a_i \u2264 k), where a_i is the show that is broadcasted on the i-th day.\n\nIt is guaranteed that the sum of the values \u200b\u200bof n for all test cases in the input does not exceed 100.", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> [n] <s> k <s> d <n> <L_n>", "<T_1>->[n] <s> k <s> d <n> <L_n>", "<L_i>-><L_i-1> <s> a_i", "<L_1>->a_1"], "constraints": ["1<=t<=100", "1<=k<=100", "1<=n<=100", "1<=d<=n", "1<=a_i<=k"]}}
{"name": "1151_A. Maxim and Biology", "description": "Today in the scientific lyceum of the Kingdom of Kremland, there was a biology lesson. The topic of the lesson was the genomes. Let's call the genome the string \"ACTG\".\n\nMaxim was very boring to sit in class, so the teacher came up with a task for him: on a given string s consisting of uppercase letters and length of at least 4, you need to find the minimum number of operations that you need to apply, so that the genome appears in it as a substring. For one operation, you can replace any letter in the string s with the next or previous in the alphabet. For example, for the letter \"D\" the previous one will be \"C\", and the next \u2014 \"E\". In this problem, we assume that for the letter \"A\", the previous one will be the letter \"Z\", and the next one will be \"B\", and for the letter \"Z\", the previous one is the letter \"Y\", and the next one is the letter \"A\".\n\nHelp Maxim solve the problem that the teacher gave him.\n\nA string a is a substring of a string b if a can be obtained from b by deletion of several (possibly, zero or all) characters from the beginning and several (possibly, zero or all) characters from the end.\n\nInput\n\nThe first line contains a single integer n (4 \u2264 n \u2264 50) \u2014 the length of the string s.\n\nThe second line contains the string s, consisting of exactly n uppercase letters of the Latin alphabet.", "grammar": {"productions": ["<S>->[n] <n> [A-Z]{n}"], "constraints": ["4<=n<=50"]}}
{"name": "p03010 diverta 2019 Programming Contest 2 - Diverta City", "description": "Constraints\n\n* N is a integer between 2 and 10 (inclusive).\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN", "grammar": {"productions": ["<S>->[N]"], "constraints": ["2<=N<=10"]}}
{"name": "p02585 AtCoder Beginner Contest 175 - Moving Piece", "description": "Takahashi will play a game using a piece on an array of squares numbered 1, 2, \\cdots, N. Square i has an integer C_i written on it. Also, he is given a permutation of 1, 2, \\cdots, N: P_1, P_2, \\cdots, P_N.\n\nNow, he will choose one square and place the piece on that square. Then, he will make the following move some number of times between 1 and K (inclusive):\n\n* In one move, if the piece is now on Square i (1 \\leq i \\leq N), move it to Square P_i. Here, his score increases by C_{P_i}.\n\n\n\nHelp him by finding the maximum possible score at the end of the game. (The score is 0 at the beginning of the game.)\n\nConstraints\n\n* 2 \\leq N \\leq 5000\n* 1 \\leq K \\leq 10^9\n* 1 \\leq P_i \\leq N\n* P_i \\neq i\n* P_1, P_2, \\cdots, P_N are all different.\n* -10^9 \\leq C_i \\leq 10^9\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN K\nP_1 P_2 \\cdots P_N\nC_1 C_2 \\cdots C_N", "grammar": {"productions": ["<S>->[N] <s> K <n> <T_N> <n> <L_N>", "<T_i>-><T_i-1> <s> P_i", "<T_1>->P_1", "<L_i>-><L_i-1> <s> C_i", "<L_1>->C_1"], "constraints": ["2<=N<=500", "1<=K<=10^9", "1<=P_i<=N", "P_i!=i", "P_i!=P_j", "-10^9<=C_i<=10^9"]}}
{"name": "673_C. Bear and Colors", "description": "Input\n\nThe first line of the input contains a single integer n (1 <= n <= 5000) --- the number of balls.\n\nThe second line contains n integers t1, t2, ..., tn (1 <= ti <= n) where ti is the color of the i-th ball.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <s> t_i", "<T_1>->t_1"], "constraints": ["1<=n<=5000", "1<=t_i<=n"]}}
{"name": "p03042 AtCoder Beginner Contest 126 - YYMM or MMYY", "description": "You have a digit sequence S of length 4. You are wondering which of the following formats S is in:\n\n* YYMM format: the last two digits of the year and the two-digit representation of the month (example: `01` for January), concatenated in this order\n* MMYY format: the two-digit representation of the month and the last two digits of the year, concatenated in this order\n\n\n\nIf S is valid in only YYMM format, print `YYMM`; if S is valid in only MMYY format, print `MMYY`; if S is valid in both formats, print `AMBIGUOUS`; if S is valid in neither format, print `NA`.\n\nConstraints\n\n* S is a digit sequence of length 4.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nS", "grammar": {"productions": ["<S>->[0-9]{4}"], "constraints": []}}
{"name": "p03250 AtCoder Beginner Contest 110 - Maximize the Formula", "description": "You have decided to give an allowance to your child depending on the outcome of the game that he will play now.\n\nThe game is played as follows:\n\n* There are three \"integer panels\", each with a digit between 1 and 9 (inclusive) printed on it, and one \"operator panel\" with a `+` printed on it.\n* The player should construct a formula of the form X + Y, by arranging the four panels from left to right. (The operator panel should not be placed at either end of the formula.)\n* Then, the amount of the allowance will be equal to the resulting value of the formula.\n\n\n\nGiven the values A, B and C printed on the integer panels used in the game, find the maximum possible amount of the allowance.\n\nConstraints\n\n* All values in input are integers.\n* 1 \\leq A, B, C \\leq 9\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nA B C", "grammar": {"productions": ["<S>->A <s> B <s> C"], "constraints": ["1<=A<=9", "1<=B<=9", "1<=C<=9"]}}
{"name": "p02642 AtCoder Beginner Contest 170 - Not Divisible", "description": "Given is a number sequence A of length N.\n\nFind the number of integers i \\left(1 \\leq i \\leq N\\right) with the following property:\n\n* For every integer j \\left(1 \\leq j \\leq N\\right) such that i \\neq j , A_j does not divide A_i.\n\nConstraints\n\n* All values in input are integers.\n* 1 \\leq N \\leq 2 \\times 10^5\n* 1 \\leq A_i \\leq 10^6\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\nA_1 A_2 \\cdots A_N", "grammar": {"productions": ["<S>->[N] <n> <T_N>", "<T_i>-><T_i-1> <s> A_i", "<T_1>->A_1"], "constraints": ["1<=N<=2*10^5", "1<=A_i<=10^6"]}}
{"name": "1236_A. Stones", "description": "Alice is playing with some stones.\n\nNow there are three numbered heaps of stones. The first of them contains a stones, the second of them contains b stones and the third of them contains c stones.\n\nEach time she can do one of two operations:\n\n  1. take one stone from the first heap and two stones from the second heap (this operation can be done only if the first heap contains at least one stone and the second heap contains at least two stones); \n  2. take one stone from the second heap and two stones from the third heap (this operation can be done only if the second heap contains at least one stone and the third heap contains at least two stones). \n\n\n\nShe wants to get the maximum number of stones, but she doesn't know what to do. Initially, she has 0 stones. Can you help her?\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Next t lines describe test cases in the following format:\n\nLine contains three non-negative integers a, b and c, separated by spaces (0 \u2264 a,b,c \u2264 100) \u2014 the number of stones in the first, the second and the third heap, respectively.\n\nIn hacks it is allowed to use only one test case in the input, so t = 1 should be satisfied.", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> a <s> b <s> c", "<T_1>->a <s> b <s> c"], "constraints": ["1<=t<=100", "0<=a<=100", "0<=b<=100", "0<=c<=100"]}}
{"name": "p01855 Checkered Pattern", "description": "input\n\n\nT\nh_1 \\ w_1\n...\nh_T \\ w_T\n\n\nOne file contains T inputs. The T in the first line and the vertical and horizontal lengths h_i and w_i in the Tth input are input in the 1 + i line.\n\nConstraint\n\n* An integer\n* 1 <= T <= 1000\n* 1 <= h_i, w_i <=10^9", "grammar": {"productions": ["<S>->[T] <n> <T_T>", "<T_i>->h_i <s> w_i <n> <T_i-1>", "<T_1>->h_1 <s> w_1"], "constraints": ["1<=T<=1000", "1<=h_i,w_i<=10^9"]}}
{"name": "118_B. Present from Lena", "description": "Input\n\nThe first line contains the single integer n (2 <= n <= 9).", "grammar": {"productions": ["<S>->[2-9]{1}"], "constraints": ["2<=n<=9"]}}
{"name": "467_B. Fedor and New Game", "description": "After you had helped George and Alex to move in the dorm, they went to help their friend Fedor play a new computer game \u00abCall of Soldiers 3\u00bb.\n\nThe game has (m + 1) players and n types of soldiers in total. Players \u00abCall of Soldiers 3\u00bb are numbered form 1 to (m + 1). Types of soldiers are numbered from 0 to n - 1. Each player has an army. Army of the i-th player can be described by non-negative integer xi. Consider binary representation of xi: if the j-th bit of number xi equal to one, then the army of the i-th player has soldiers of the j-th type. \n\nFedor is the (m + 1)-th player of the game. He assume that two players can become friends if their armies differ in at most k types of soldiers (in other words, binary representations of the corresponding numbers differ in at most k bits). Help Fedor and count how many players can become his friends.\n\nInput\n\nThe first line contains three integers n, m, k (1 \u2264 k \u2264 n \u2264 20; 1 \u2264 m \u2264 1000).\n\nThe i-th of the next (m + 1) lines contains a single integer xi (1 \u2264 xi \u2264 2n - 1), that describes the i-th player's army. We remind you that Fedor is the (m + 1)-th player.", "grammar": {"productions": ["<S>->n <s> [m] <s> k <n> <T_m+1>", "<T_i>-><T_i-1> <n> x_i", "<T_1>->x_1"], "constraints": ["1<=k<=20", "1<=n<=20", "1<=m<=1000", "1<=x_i<=(2*n-1)"]}}
{"name": "1117_B. Emotes", "description": "There are n emotes in very popular digital collectible card game (the game is pretty famous so we won't say its name). The i-th emote increases the opponent's happiness by a_i units (we all know that emotes in this game are used to make opponents happy).\n\nYou have time to use some emotes only m times. You are allowed to use any emotion once, more than once, or not use it at all. The only restriction is that you cannot use the same emote more than k times in a row (otherwise the opponent will think that you're trolling him).\n\nNote that two emotes i and j (i \u2260 j) such that a_i = a_j are considered different.\n\nYou have to make your opponent as happy as possible. Find the maximum possible opponent's happiness.\n\nInput\n\nThe first line of the input contains three integers n, m and k (2 \u2264 n \u2264 2 \u22c5 10^5, 1 \u2264 k \u2264 m \u2264 2 \u22c5 10^9) \u2014 the number of emotes, the number of times you can use emotes and the maximum number of times you may use the same emote in a row.\n\nThe second line of the input contains n integers a_1, a_2, ..., a_n (1 \u2264 a_i \u2264 10^9), where a_i is value of the happiness of the i-th emote.", "grammar": {"productions": ["<S>->[n] <s> m <s> k <n> <T_n>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1"], "constraints": ["2<=n<=2*10^5", "1<=k<=m<=2*10^9", "1<=a_i<=10^9"]}}
{"name": "1269_E. K Integers", "description": "Input\n\nThe first line of input contains one integer n (1 <= n <= 200 000): the number of elements in the permutation.\n\nThe next line of input contains n integers p_1, p_2, ..., p_n: given permutation (1 <= p_i <= n).", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <s> p_i", "<T_1>->p_1"], "constraints": ["1<=n<=200000", "1<=p_i<=n"]}}
{"name": "1029_B. Creating the Contest", "description": "You are given a problemset consisting of n problems. The difficulty of the i-th problem is a_i. It is guaranteed that all difficulties are distinct and are given in the increasing order.\n\nYou have to assemble the contest which consists of some problems of the given problemset. In other words, the contest you have to assemble should be a subset of problems (not necessary consecutive) of the given problemset. There is only one condition that should be satisfied: for each problem but the hardest one (the problem with the maximum difficulty) there should be a problem with the difficulty greater than the difficulty of this problem but not greater than twice the difficulty of this problem. In other words, let a_{i_1}, a_{i_2}, ..., a_{i_p} be the difficulties of the selected problems in increasing order. Then for each j from 1 to p-1 a_{i_{j + 1}} \u2264 a_{i_j} \u22c5 2 should hold. It means that the contest consisting of only one problem is always valid.\n\nAmong all contests satisfying the condition above you have to assemble one with the maximum number of problems. Your task is to find this number of problems.\n\nInput\n\nThe first line of the input contains one integer n (1 \u2264 n \u2264 2 \u22c5 10^5) \u2014 the number of problems in the problemset.\n\nThe second line of the input contains n integers a_1, a_2, ..., a_n (1 \u2264 a_i \u2264 10^9) \u2014 difficulties of the problems. It is guaranteed that difficulties of the problems are distinct and are given in the increasing order.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1"], "constraints": ["1<=n<=2*10^5", "1<=a_i<=10^9"]}}
{"name": "1038_A. Equality", "description": "You are given a string s of length n, which consists only of the first k letters of the Latin alphabet. All letters in string s are uppercase.\n\nA subsequence of string s is a string that can be derived from s by deleting some of its symbols without changing the order of the remaining symbols. For example, \"ADE\" and \"BD\" are subsequences of \"ABCDE\", but \"DEA\" is not.\n\nA subsequence of s called good if the number of occurences of each of the first k letters of the alphabet is the same.\n\nFind the length of the longest good subsequence of s. \n\nInput\n\nThe first line of the input contains integers n (1\u2264 n \u2264 10^5) and k (1 \u2264 k \u2264 26).\n\nThe second line of the input contains the string s of length n. String s only contains uppercase letters from 'A' to the k-th letter of Latin alphabet.", "grammar": {"productions": ["<S>->[n] <s> k <n> [A-Z]{n-1}"], "constraints": ["1<=n<=10^5", "1<=k<=26"]}}
{"name": "p03287 AtCoder Beginner Contest 105 - Candy Distribution", "description": "There are N boxes arranged in a row from left to right. The i-th box from the left contains A_i candies.\n\nYou will take out the candies from some consecutive boxes and distribute them evenly to M children.\n\nSuch being the case, find the number of the pairs (l, r) that satisfy the following:\n\n* l and r are both integers and satisfy 1 \\leq l \\leq r \\leq N.\n* A_l + A_{l+1} + ... + A_r is a multiple of M.\n\nConstraints\n\n* All values in input are integers.\n* 1 \\leq N \\leq 10^5\n* 2 \\leq M \\leq 10^9\n* 1 \\leq A_i \\leq 10^9\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN M\nA_1 A_2 ... A_N", "grammar": {"productions": ["<S>->[N] <s> M <n> <T_N>", "<T_i>-><T_i-1> <s> A_i", "<T_1>->A_1"], "constraints": ["1<=N<=10^5", "2<=M<=10^9", "1<=A_i<=10^9"]}}
{"name": "604_A. Uncowed Forces", "description": "Input\n\nThe first line of the input contains five space-separated integers m1, m2, m3, m4, m5, where mi (0 <= mi <= 119) is the time of Kevin's last submission for problem i. His last submission is always correct and gets accepted.\n\nThe second line contains five space-separated integers w1, w2, w3, w4, w5, where wi (0 <= wi <= 10) is Kevin's number of wrong submissions on problem i.\n\nThe last line contains two space-separated integers hs and hu (0 <= hs, hu <= 20), denoting the Kevin's numbers of successful and unsuccessful hacks, respectively.", "grammar": {"productions": ["<S>->m1 <s> m2 <s> m3 <s> m4 <s> m5 <n> w1 <s> w2 <s> w3 <s> w4 <s> w5 <n> hs <s> hu"], "constraints": ["0<=m1<=119", "0<=m2<=119", "0<=m3<=119", "0<=m4<=119", "0<=m5<=119", "0<=w1<=10", "0<=w2<=10", "0<=w3<=10", "0<=w4<=10", "0<=w5<=10", "0<=hs<=20", "0<=hu<=20"]}}
{"name": "p03242 AtCoder Beginner Contest 111 - AtCoder Beginner Contest 999", "description": "Cat Snuke is learning to write characters. Today, he practiced writing digits `1` and `9`, but he did it the other way around.\n\nYou are given a three-digit integer n written by Snuke. Print the integer obtained by replacing each digit `1` with `9` and each digit `9` with `1` in n.\n\nConstraints\n\n* 111 \\leq n \\leq 999\n* n is an integer consisting of digits `1` and `9`.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nn", "grammar": {"productions": ["<S>->[1-9]{111,999}"], "constraints": [""]}}
{"name": "61_A. Ultra-Fast Mathematician", "description": "Shapur was an extremely gifted student. He was great at everything including Combinatorics, Algebra, Number Theory, Geometry, Calculus, etc. He was not only smart but extraordinarily fast! He could manage to sum 1018 numbers in a single second.\n\nOne day in 230 AD Shapur was trying to find out if any one can possibly do calculations faster than him. As a result he made a very great contest and asked every one to come and take part.\n\nIn his contest he gave the contestants many different pairs of numbers. Each number is made from digits 0 or 1. The contestants should write a new number corresponding to the given pair of numbers. The rule is simple: The i-th digit of the answer is 1 if and only if the i-th digit of the two given numbers differ. In the other case the i-th digit of the answer is 0.\n\nShapur made many numbers and first tried his own speed. He saw that he can perform these operations on numbers of length \u221e (length of a number is number of digits in it) in a glance! He always gives correct answers so he expects the contestants to give correct answers, too. He is a good fellow so he won't give anyone very big numbers and he always gives one person numbers of same length.\n\nNow you are going to take part in Shapur's contest. See if you are faster and more accurate.\n\nInput\n\nThere are two lines in each input. Each of them contains a single number. It is guaranteed that the numbers are made from 0 and 1 only and that their length is same. The numbers may start with 0. The length of each number doesn't exceed 100.", "grammar": {"productions": ["<S>->[01]{S} <n> [01]{S}"], "constraints": ["1<=S<=100"]}}
{"name": "392_A. Blocked Points", "description": "Input\n\nThe first line contains an integer n (0 <= n <= 4\u00b7107).", "grammar": {"productions": ["<S>->n"], "constraints": ["0<=n<=4*10^7"]}}
{"name": "1146_D. Frog Jumping", "description": "Input\n\nThe first line contains three integers m, a, b (1 <= m <= 10^9, 1 <= a,b <= 10^5).", "grammar": {"productions": ["<S>->m <s> a <s> b"], "constraints": ["1<=m<=10^9", "1<=a,b<=10^5"]}}
{"name": "787_C. Berzerk", "description": "Input\n\nThe first line of input contains a single integer n (2 <= n <= 7000) --- number of objects in game.\n\nThe second line contains integer k1 followed by k1 distinct integers s1, 1, s1, 2, ..., s1, k1 --- Rick's set.\n\nThe third line contains integer k2 followed by k2 distinct integers s2, 1, s2, 2, ..., s2, k2 --- Morty's set\n\n1 <= ki <= n - 1 and 1 <= si, 1, si, 2, ..., si, ki <= n - 1 for 1 <= i <= 2.", "grammar": {"productions": ["<S>->[n] <n> [k1] <s> <T_k1> <n> [k2] <s> <T_k2>", "<T_i>-><T_i-1> <s> S_i", "<T_1>->S_1", "<L_i>-><L_i-1> <s> S_i", "<L_1>->S_1"], "constraints": ["2<=n<=7000", "1<=k1<=n-1", "1<=k2<=n-1", "1<=S_i<=n-1"]}}
{"name": "p00298 Mighty Man", "description": "input\n\nThe input is given in the following format.\n\n\nN\nc1 w1\nc2 w2\n::\ncN wN\n\n\nThe number of powerful people N (1 <= N <= 1000) is given in the first line. The following N lines give the maximum weight ci (1 <= ci <= 100000) and the weight wi (1 <= wi <= 100000) that the i-th power can have.", "grammar": {"productions": ["<S>->[N] <n> <T_N>", "<T_i>-><T_i-1> <n> ci <s> wi", "<T_1>->ci <s> wi"], "constraints": ["1<=N<=1000", "1<=ci<=100000", "1<=wi<=100000"]}}
{"name": "p03720 AtCoder Beginner Contest 061 - Counting Roads", "description": "There are N cities and M roads. The i-th road (1\u2264i\u2264M) connects two cities a_i and b_i (1\u2264a_i,b_i\u2264N) bidirectionally. There may be more than one road that connects the same pair of two cities. For each city, how many roads are connected to the city?\n\nConstraints\n\n* 2\u2264N,M\u226450\n* 1\u2264a_i,b_i\u2264N\n* a_i \u2260 b_i\n* All input values are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN M\na_1 b_1\n:\na_M b_M", "grammar": {"productions": ["<S>->N <s> [M] <n> <T_M>", "<T_i>-><T_i-1> <n> a_i <s> b_i", "<T_1>->a_1 <s> b_1"], "constraints": ["2<=N<=50", "2<=M<=50", "1<=a_i<=N", "1<=b_i<=N", "a_i!=b_i"]}}
{"name": "p03694 AtCoder Beginner Contest 064 - Traveling AtCoDeer Problem", "description": "Constraints\n\n* 1 <= N <= 100\n* 0 <= a_i <= 1000\n* a_i is an integer.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\na_1 a_2 ... a_N", "grammar": {"productions": ["<S>->[N] <n> <T_N>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_i"], "constraints": ["1<=N<=100", "0<=a_i<=1000"]}}
{"name": "609_B. The Best Gift", "description": "Input\n\nThe first line contains two positive integers n and m (2 <= n <= 2\u00b7105, 2 <= m <= 10) --- the number of books in the bookstore and the number of genres.\n\nThe second line contains a sequence a1, a2, ..., an, where ai (1 <= ai <= m) equals the genre of the i-th book.\n\nIt is guaranteed that for each genre there is at least one book of that genre.", "grammar": {"productions": ["<S>->[n] <s> [m] <n> <T_n>", "<T_i>-><T_i-1> <s> A_i", "<T_1>->A_i"], "constraints": ["2<=n<=2*10^5", "2<=m<=10", "1<=A_i<=m"]}}
{"name": "p02824 AtCoder Grand Contest 041 - Voting Judges", "description": "N problems are proposed for an upcoming contest. Problem i has an initial integer score of A_i points.\n\nM judges are about to vote for problems they like. Each judge will choose exactly V problems, independently from the other judges, and increase the score of each chosen problem by 1.\n\nAfter all M judges cast their vote, the problems will be sorted in non-increasing order of score, and the first P problems will be chosen for the problemset. Problems with the same score can be ordered arbitrarily, this order is decided by the chief judge.\n\nHow many problems out of the given N have a chance to be chosen for the problemset?\n\nConstraints\n\n* 2 \\le N \\le 10^5\n* 1 \\le M \\le 10^9\n* 1 \\le V \\le N - 1\n* 1 \\le P \\le N - 1\n* 0 \\le A_i \\le 10^9\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN M V P\nA_1 A_2 ... A_N", "grammar": {"productions": ["<S>->[N] <s> M <s> V <s> P <n> <T_N>", "<T_i>-><T_i-1> <s> A_i", "<T_1>->A_1"], "constraints": ["2<=N<=10^5", "1<=M<=10^9", "1<=V<=N-1", "1<=P<=N-1", "0<=A_i<=10^9"]}}
{"name": "p03651 AtCoder Grand Contest 018 - Getting Difference", "description": "There is a box containing N balls. The i-th ball has the integer A_i written on it. Snuke can perform the following operation any number of times:\n\n* Take out two balls from the box. Then, return them to the box along with a new ball, on which the absolute difference of the integers written on the two balls is written.\n\n\n\nDetermine whether it is possible for Snuke to reach the state where the box contains a ball on which the integer K is written.\n\nConstraints\n\n* 1 \\leq N \\leq 10^5\n* 1 \\leq A_i \\leq 10^9\n* 1 \\leq K \\leq 10^9\n* All input values are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN K\nA_1 A_2 ... A_N", "grammar": {"productions": ["<S>->[N] <s> K <n> <T_N>", "<T_i>-><T_i-1> <s> A_i", "<T_1>->A_1"], "constraints": ["1<=N<=10^5", "1<=A_i<=10^9", "1<=K<=10^9"]}}
{"name": "689_E. Mike and Geometry Problem", "description": "Input\n\nThe first line contains two integers n and k (1 <= k <= n <= 200 000) --- the number of segments and the number of segments in intersection groups respectively.\n\nThen n lines follow, the i-th line contains two integers li, ri ( - 109 <= li <= ri <= 109), describing i-th segment bounds.", "grammar": {"productions": ["<S>->[n] <s> [k] <n> <T_n>", "<T_i>-><T_i-1> <n> l_i <s> r_i", "<T_1>->l_1 <s> r_1"], "constraints": ["1<=k<=n", "1<=n<=200000", "-10^9<=l_i<=10^9"]}}
{"name": "p03844 AtCoder Beginner Contest 050 - Addition and Subtraction Easy", "description": "Joisino wants to evaluate the formula \"A op B\". Here, A and B are integers, and the binary operator op is either `+` or `-`. Your task is to evaluate the formula instead of her.\n\nConstraints\n\n* 1\u2266A,B\u226610^9\n* op is either `+` or `-`.\n\nInput\n\nThe input is given from Standard Input in the following format:\n\n\nA op B", "grammar": {"productions": ["<S>->A <s> [+-]{1} <s> B"], "constraints": ["1<=A<=10^9", "1<=B<=10^9"]}}
{"name": "p02838 AtCoder Beginner Contest 147 - Xor Sum 4", "description": "We have N integers. The i-th integer is A_i.\n\nFind \\sum_{i=1}^{N-1}\\sum_{j=i+1}^{N} (A_i \\mbox{ XOR } A_j), modulo (10^9+7).\n\nWhat is \\mbox{ XOR }?\n\nThe XOR of integers A and B, A \\mbox{ XOR } B, is defined as follows:\n\n* When A \\mbox{ XOR } B is written in base two, the digit in the 2^k's place (k \\geq 0) is 1 if either A or B, but not both, has 1 in the 2^k's place, and 0 otherwise.\n\nFor example, 3 \\mbox{ XOR } 5 = 6. (In base two: 011 \\mbox{ XOR } 101 = 110.)\n\nConstraints\n\n* 2 \\leq N \\leq 3 \\times 10^5\n* 0 \\leq A_i < 2^{60}\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\nA_1 A_2 ... A_N", "grammar": {"productions": ["<S>->[N] <n> <T_N>", "<T_i>-><T_i-1> <s> A_i", "<T_1>->A_1"], "constraints": ["2<=N<=3*10^5", "0<=A_i<=2^60"]}}
{"name": "315_A. Sereja and Bottles", "description": "Input\n\nThe first line contains integer n (1 <= n <= 100) --- the number of bottles. The next n lines contain the bottles' description. The i-th line contains two integers ai, bi (1 <= ai, bi <= 1000) --- the description of the i-th bottle.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <n> a_i <s> b_i", "<T_1>->a_1 <s> b_1"], "constraints": ["1<=n<=100", "1<=a_i,b_i<=1000"]}}
{"name": "868_A. Bark to Unlock", "description": "Input\n\nThe first line contains two lowercase English letters --- the password on the phone.\n\nThe second line contains single integer n (1 <= n <= 100) --- the number of words Kashtanka knows.\n\nThe next n lines contain two lowercase English letters each, representing the words Kashtanka knows. The words are guaranteed to be distinct.", "grammar": {"productions": ["<S>->[a-z]{2} <n> [N] <n> <T_N>", "<T_i>-><T_i-1> <n> [a-z]{2}", "<T_1>->[a-z]{2}"], "constraints": ["1<=N<=100"]}}
{"name": "p02856 DISCO Presents Discovery Channel Code Contest 2020 Qual - Digit Sum Replace", "description": "N programmers are going to participate in the preliminary stage of DDCC 20XX. Due to the size of the venue, however, at most 9 contestants can participate in the finals.\n\nThe preliminary stage consists of several rounds, which will take place as follows:\n\n* All the N contestants will participate in the first round.\n* When X contestants participate in some round, the number of contestants advancing to the next round will be decided as follows:\n* The organizer will choose two consecutive digits in the decimal notation of X, and replace them with the sum of these digits. The number resulted will be the number of contestants advancing to the next round.\nFor example, when X = 2378, the number of contestants advancing to the next round will be 578 (if 2 and 3 are chosen), 2108 (if 3 and 7 are chosen), or 2315 (if 7 and 8 are chosen).\nWhen X = 100, the number of contestants advancing to the next round will be 10, no matter which two digits are chosen.\n* The preliminary stage ends when 9 or fewer contestants remain.\n\n\n\nRingo, the chief organizer, wants to hold as many rounds as possible. Find the maximum possible number of rounds in the preliminary stage.\n\nSince the number of contestants, N, can be enormous, it is given to you as two integer sequences d_1, \\ldots, d_M and c_1, \\ldots, c_M, which means the following: the decimal notation of N consists of c_1 + c_2 + \\ldots + c_M digits, whose first c_1 digits are all d_1, the following c_2 digits are all d_2, \\ldots, and the last c_M digits are all d_M.\n\nConstraints\n\n* 1 \\leq M \\leq 200000\n* 0 \\leq d_i \\leq 9\n* d_1 \\neq 0\n* d_i \\neq d_{i+1}\n* c_i \\geq 1\n* 2 \\leq c_1 + \\ldots + c_M \\leq 10^{15}\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nM\nd_1 c_1\nd_2 c_2\n:\nd_M c_M", "grammar": {"productions": ["<S>->[M] <n> <T_M>", "<T_i>-><T_i-1> <n> d_i <s> c_i", "<T_1>->d_1 <s> c_1"], "constraints": ["1<=M<=200000", "0<=d_i<=9", "d_1!=0", "d_i!=d_i+1", "c_i>=1", "2<=c_i<=10^15"]}}
{"name": "p02868 NIKKEI Programming Contest 2019-2 - Shortest Path on a Line", "description": "We have N points numbered 1 to N arranged in a line in this order.\n\nTakahashi decides to make an undirected graph, using these points as the vertices. In the beginning, the graph has no edge. Takahashi will do M operations to add edges in this graph. The i-th operation is as follows:\n\n* The operation uses integers L_i and R_i between 1 and N (inclusive), and a positive integer C_i. For every pair of integers (s, t) such that L_i \\leq s < t \\leq R_i, add an edge of length C_i between Vertex s and Vertex t.\n\n\n\nThe integers L_1, ..., L_M, R_1, ..., R_M, C_1, ..., C_M are all given as input.\n\nTakahashi wants to solve the shortest path problem in the final graph obtained. Find the length of the shortest path from Vertex 1 to Vertex N in the final graph.\n\nConstraints\n\n* 2 \\leq N \\leq 10^5\n* 1 \\leq M \\leq 10^5\n* 1 \\leq L_i < R_i \\leq N\n* 1 \\leq C_i \\leq 10^9\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN M\nL_1 R_1 C_1\n:\nL_M R_M C_M", "grammar": {"productions": ["<S>->N <s> [M] <n> <T_M>", "<T_i>-><T_i-1> <n> L_i <s> R_i <s> C_i", "<T_1>->L_1 <s> R_1 <s> C_1"], "constraints": ["2<=N<=10^5", "2<=M<=10^5", "1<=L_i<R_i<=N", "1<=C_i<=10^9"]}}
{"name": "p00131 Doctor's Strange Particles", "description": "Input\n\nGiven multiple datasets. The first line gives the number of datasets n (n <= 20). Each dataset is given in the following format:\n\n\na1,1 a1,2 ... a1,10\na2,1 a2,2 ... a2,10\n::\na10,1 a10,2 ... a10,10\n\n\nai, j represent an integer (0 or 1) indicating the state of the photocell in the i-th row and j-th column of the device.", "grammar": {"productions": ["<S>->n <n> <T_n>", "<T_i>-><T_i-1> <n> <L_10>", "<T_1>-><L_10>", "<L_i>-><L_i-1> <s> [01]{1}", "<L_1>->[01]{1}"], "constraints": ["n<=20"]}}
{"name": "1360_A. Minimal Square", "description": "Find the minimum area of a square land on which you can place two identical rectangular a \u00d7 b houses. The sides of the houses should be parallel to the sides of the desired square land.\n\nFormally, \n\n  * You are given two identical rectangles with side lengths a and b (1 \u2264 a, b \u2264 100) \u2014 positive integers (you are given just the sizes, but not their positions). \n  * Find the square of the minimum area that contains both given rectangles. Rectangles can be rotated (both or just one), moved, but the sides of the rectangles should be parallel to the sides of the desired square. \n\n\n\nTwo rectangles can touch each other (side or corner), but cannot intersect. Rectangles can also touch the sides of the square but must be completely inside it. You can rotate the rectangles. Take a look at the examples for a better understanding.\n\n<image> The picture shows a square that contains red and green rectangles.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 10 000) \u2014the number of test cases in the input. Then t test cases follow.\n\nEach test case is a line containing two integers a, b (1 \u2264 a, b \u2264 100) \u2014 side lengths of the rectangles.", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> a <s> b", "<T_1>->a <s> b"], "constraints": ["1<=t<=10000", "1<=a,b<=100"]}}
{"name": "141_A. Amusing Joke", "description": "So, the New Year holidays are over. Santa Claus and his colleagues can take a rest and have guests at last. When two \"New Year and Christmas Men\" meet, thear assistants cut out of cardboard the letters from the guest's name and the host's name in honor of this event. Then the hung the letters above the main entrance. One night, when everyone went to bed, someone took all the letters of our characters' names. Then he may have shuffled the letters and put them in one pile in front of the door.\n\nThe next morning it was impossible to find the culprit who had made the disorder. But everybody wondered whether it is possible to restore the names of the host and his guests from the letters lying at the door? That is, we need to verify that there are no extra letters, and that nobody will need to cut more letters.\n\nHelp the \"New Year and Christmas Men\" and their friends to cope with this problem. You are given both inscriptions that hung over the front door the previous night, and a pile of letters that were found at the front door next morning.\n\nInput\n\nThe input file consists of three lines: the first line contains the guest's name, the second line contains the name of the residence host and the third line contains letters in a pile that were found at the door in the morning. All lines are not empty and contain only uppercase Latin letters. The length of each line does not exceed 100.", "grammar": {"productions": ["<S>->[A-Z]{1,100} <n> [A-Z]{1,100} <n> [A-Z]{1,100}"], "constraints": []}}
{"name": "178_A1. Educational Game", "description": "Input\n\nThe first input line contains a single integer n. The second line contains n integers ai (0 <= ai <= 104), separated by single spaces.\n\nThe input limitations for getting 20 points are: \n\n  * 1 <= n <= 300\n\n\n\nThe input limitations for getting 50 points are: \n\n  * 1 <= n <= 2000\n\n\n\nThe input limitations for getting 100 points are: \n\n  * 1 <= n <= 105", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_i"], "constraints": ["1<=n<=10^5", "0<=a_i<=10^4"]}}
{"name": "703_A. Mishka and Game", "description": "Mishka is a little polar bear. As known, little bears loves spending their free time playing dice for chocolates. Once in a wonderful sunny morning, walking around blocks of ice, Mishka met her friend Chris, and they started playing the game.\n\nRules of the game are very simple: at first number of rounds n is defined. In every round each of the players throws a cubical dice with distinct numbers from 1 to 6 written on its faces. Player, whose value after throwing the dice is greater, wins the round. In case if player dice values are equal, no one of them is a winner.\n\nIn average, player, who won most of the rounds, is the winner of the game. In case if two players won the same number of rounds, the result of the game is draw.\n\nMishka is still very little and can't count wins and losses, so she asked you to watch their game and determine its result. Please help her!\n\nInput\n\nThe first line of the input contains single integer n n (1 \u2264 n \u2264 100) \u2014 the number of game rounds.\n\nThe next n lines contains rounds description. i-th of them contains pair of integers mi and ci (1 \u2264 mi, ci \u2264 6) \u2014 values on dice upper face after Mishka's and Chris' throws in i-th round respectively.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <n> m_i <s> c_i", "<T_1>->m_1 <s> c_1"], "constraints": ["1<=n<=100", "1<=m_i,c_i<=6"]}}
{"name": "479_A. Expression", "description": "Input\n\nThe input contains three integers a, b and c, each on a single line (1 <= a, b, c <= 10).", "grammar": {"productions": ["<S>->a <n> b <n> c"], "constraints": ["1<=a,b,c<=10"]}}
{"name": "571_E. Geometric Progressions", "description": "Input\n\nThe first line contains integer (1 <= n <= 100) --- the number of geometric progressions. \n\nNext n lines contain pairs of integers a, b (1 <= a, b <= 109), that are the first element and the common ratio of the corresponding geometric progression.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <n> a <s> b", "<T_1>->a <s> b"], "constraints": ["1<=n<=100", "1<=a,b<=10^9"]}}
{"name": "1097_A. Gennady and a Card Game", "description": "Gennady owns a small hotel in the countryside where he lives a peaceful life. He loves to take long walks, watch sunsets and play cards with tourists staying in his hotel. His favorite game is called \"Mau-Mau\".\n\nTo play Mau-Mau, you need a pack of 52 cards. Each card has a suit (Diamonds \u2014 D, Clubs \u2014 C, Spades \u2014 S, or Hearts \u2014 H), and a rank (2, 3, 4, 5, 6, 7, 8, 9, T, J, Q, K, or A).\n\nAt the start of the game, there is one card on the table and you have five cards in your hand. You can play a card from your hand if and only if it has the same rank or the same suit as the card on the table.\n\nIn order to check if you'd be a good playing partner, Gennady has prepared a task for you. Given the card on the table and five cards in your hand, check if you can play at least one card.\n\nInput\n\nThe first line of the input contains one string which describes the card on the table. The second line contains five strings which describe the cards in your hand.\n\nEach string is two characters long. The first character denotes the rank and belongs to the set \\{{\\tt 2}, {\\tt 3}, {\\tt 4}, {\\tt 5}, {\\tt 6}, {\\tt 7}, {\\tt 8}, {\\tt 9}, {\\tt T}, {\\tt J}, {\\tt Q}, {\\tt K}, {\\tt A}\\}. The second character denotes the suit and belongs to the set \\{{\\tt D}, {\\tt C}, {\\tt S}, {\\tt H}\\}.\n\nAll the cards in the input are different.", "grammar": {"productions": ["<S>-><R> <T> <n> <R> <T> <s> <R> <T> <s> <R> <T> <s> <R> <T> <s> <R> <T>", "<R>->2|3|4|5|6|7|8|9|T|J|Q|K|A", "<T>->D|C|S|H"], "constraints": []}}
{"name": "p02616 AtCoder Beginner Contest 173 - Multiplication 4", "description": "Given are N integers A_1,\\ldots,A_N.\n\nWe will choose exactly K of these elements. Find the maximum possible product of the chosen elements.\n\nThen, print the maximum product modulo (10^9+7), using an integer between 0 and 10^9+6 (inclusive).\n\nConstraints\n\n* 1 \\leq K \\leq N \\leq 2\\times 10^5\n* |A_i| \\leq 10^9\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN K\nA_1 \\ldots A_N", "grammar": {"productions": ["<S>->N <s> K <n> <T_N>", "<T_i>-><T_i-1> <s> A_i", "<T_1>->A_1"], "constraints": ["1<=N<=2*10^5", "1<=K<=2*10^5", "-10^9<=A_i<=10^9"]}}
{"name": "922_B. Magic Forest", "description": "Input\n\nThe only line contains a single integer n (1 <= n <= 2500).", "grammar": {"productions": ["<S>->n"], "constraints": ["1<=n<=2500"]}}
{"name": "1363_C. Game On Leaves", "description": "Ayush and Ashish play a game on an unrooted tree consisting of n nodes numbered 1 to n. Players make the following move in turns: \n\n  * Select any leaf node in the tree and remove it together with any edge which has this node as one of its endpoints. A leaf node is a node with degree less than or equal to 1. \n\n\n\nA tree is a connected undirected graph without cycles.\n\nThere is a special node numbered x. The player who removes this node wins the game. \n\nAyush moves first. Determine the winner of the game if each player plays optimally.\n\nInput\n\nThe first line of the input contains a single integer t (1 \u2264 t \u2264 10) \u2014 the number of testcases. The description of the test cases follows.\n\nThe first line of each testcase contains two integers n and x (1\u2264 n \u2264 1000, 1 \u2264 x \u2264 n) \u2014 the number of nodes in the tree and the special node respectively.\n\nEach of the next n-1 lines contain two integers u, v (1 \u2264 u, v \u2264 n,   u \u2260 v), meaning that there is an edge between nodes u and v in the tree.", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> [n] <s> x <n> <L_n-1>", "<T_1>->[n] <s> x <n> <L_n-1>", "<L_i>-><L_i-1> <n> u <s> v", "<L_1>->u <s> v"], "constraints": ["1<=t<=10", "1<=n<=1000", "1<=x<=n", "1<=u,v<=n", "u!=v"]}}
{"name": "p03345 AtCoder Grand Contest 024 - Fairness", "description": "Takahashi, Nakahashi and Hikuhashi have integers A, B and C, respectively. After repeating the following operation K times, find the integer Takahashi will get minus the integer Nakahashi will get:\n\n* Each of them simultaneously calculate the sum of the integers that the other two people have, then replace his own integer with the result.\n\n\n\nHowever, if the absolute value of the answer exceeds 10^{18}, print `Unfair` instead.\n\nConstraints\n\n* 1 \\leq A,B,C \\leq 10^9\n* 0 \\leq K \\leq 10^{18}\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nA B C K", "grammar": {"productions": ["<S>->A <s> B <s> C <s> K"], "constraints": ["1<=A,B,C<=10^9", "0<=K<=10^18"]}}
{"name": "p03215 Dwango Programming Contest V - Sum AND Subarrays", "description": "One day, Niwango-kun, an employee of Dwango Co., Ltd., found an integer sequence (a_1, ..., a_N) of length N. He is interested in properties of the sequence a.\n\nFor a nonempty contiguous subsequence a_l, ..., a_r (1 \\leq l \\leq r \\leq N) of the sequence a, its beauty is defined as a_l + ... + a_r. Niwango-kun wants to know the maximum possible value of the bitwise AND of the beauties of K nonempty contiguous subsequences among all N(N+1)/2 nonempty contiguous subsequences. (Subsequences may share elements.)\n\nFind the maximum possible value for him.\n\nConstraints\n\n* 2 \\leq N \\leq 1000\n* 1 \\leq a_i \\leq 10^9\n* 1 \\leq K \\leq N(N+1)/2\n* All numbers given in input are integers\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN K\na_1 a_2 ... a_N", "grammar": {"productions": ["<S>->[N] <s> K <n> <T_N>", "<T_i>-><T_i-1> <s> a_i", "<T-1>->a_1"], "constraints": ["2<=N<=1000", "1<=a_i<=10^9", "1<=K<=N*(N+1)/2"]}}
{"name": "p03805 AtCoder Beginner Contest 054 - One-stroke Path", "description": "You are given an undirected unweighted graph with N vertices and M edges that contains neither self-loops nor double edges.\nHere, a self-loop is an edge where a_i = b_i (1\u2264i\u2264M), and double edges are two edges where (a_i,b_i)=(a_j,b_j) or (a_i,b_i)=(b_j,a_j) (1\u2264i<j\u2264M).\nHow many different paths start from vertex 1 and visit all the vertices exactly once?\nHere, the endpoints of a path are considered visited.\n\nFor example, let us assume that the following undirected graph shown in Figure 1 is given.\n\n<image>\n\nFigure 1: an example of an undirected graph\n\nThe following path shown in Figure 2 satisfies the condition.\n\n<image>\n\nFigure 2: an example of a path that satisfies the condition\n\nHowever, the following path shown in Figure 3 does not satisfy the condition, because it does not visit all the vertices.\n\n<image>\n\nFigure 3: an example of a path that does not satisfy the condition\n\nNeither the following path shown in Figure 4, because it does not start from vertex 1.\n\n<image>\n\nFigure 4: another example of a path that does not satisfy the condition\n\nConstraints\n\n* 2\u2266N\u22668\n* 0\u2266M\u2266N(N-1)/2\n* 1\u2266a_i<b_i\u2266N\n* The given graph contains neither self-loops nor double edges.\n\nInput\n\nThe input is given from Standard Input in the following format:\n\n\nN M\na_1 b_1\na_2 b_2\n:\na_M b_M", "grammar": {"productions": ["<S>->N <s> [M] <n> <T_M>", "<T_i>-><T_i-1> <n> a_i <s> b_i", "<T_1>->a_1 <s> b_1"], "constraints": ["2<=N<=8", "0<=M<=N*(N-1)/2", "1<=a_i<b_i<=N"]}}
{"name": "686_A. Free Ice Cream", "description": "After their adventure with the magic mirror Kay and Gerda have returned home and sometimes give free ice cream to kids in the summer.\n\nAt the start of the day they have x ice cream packs. Since the ice cream is free, people start standing in the queue before Kay and Gerda's house even in the night. Each person in the queue wants either to take several ice cream packs for himself and his friends or to give several ice cream packs to Kay and Gerda (carriers that bring ice cream have to stand in the same queue).\n\nIf a carrier with d ice cream packs comes to the house, then Kay and Gerda take all his packs. If a child who wants to take d ice cream packs comes to the house, then Kay and Gerda will give him d packs if they have enough ice cream, otherwise the child will get no ice cream at all and will leave in distress.\n\nKay wants to find the amount of ice cream they will have after all people will leave from the queue, and Gerda wants to find the number of distressed kids.\n\nInput\n\nThe first line contains two space-separated integers n and x (1 \u2264 n \u2264 1000, 0 \u2264 x \u2264 10^9).\n\nEach of the next n lines contains a character '+' or '-', and an integer di, separated by a space (1 \u2264 di \u2264 10^9). Record \"+ di\" in i-th line means that a carrier with di ice cream packs occupies i-th place from the start of the queue, and record \"- di\" means that a child who wants to take di packs stands in i-th place.", "grammar": {"productions": ["<S>->[n] <s> x <n> <T_n>", "<T_i>-><T_i-1> <n> [+-]{1} <s> d_i", "<T_1>->[+-]{1} <s> d_1"], "constraints": ["1<=n<=1000", "0<=x<=10^9", "1<=d_i<=10^9"]}}
{"name": "1061_D. TV Shows", "description": "Input\n\nThe first line contains integers n, x and y (1 <= n <= 10^5, 1 <= y < x <= 10^9) --- the number of TV shows, the cost to rent a TV for the first minute and the cost to rent a TV for every subsequent minute.\n\nEach of the next n lines contains two integers l_i and r_i (1 <= l_i <= r_i <= 10^9) denoting the start and the end minute of the i-th TV show.", "grammar": {"productions": ["<S>->[n] <s> x <s> y <n> <T_n>", "<T_i>-><T_i-1> <n> l_i <s> r_i", "<T_1>->l_1 <s> r_1"], "constraints": ["1<=n<=10^5", "1<=y<x<=10^9", "1<=l_i<=r_i<=10^9"]}}
{"name": "1251_E1. Voting (Easy Version)", "description": "Input\n\nThe first line contains one integer t (1 <= t <= 5000) --- the number of test cases.\n\nThe first line of each test case contains one integer n (1 <= n <= 5000) --- the number of voters.\n\nThe next n lines contains the description of voters. i-th line contains two integers m_i and p_i (1 <= p_i <= 10^9, 0 <= m_i < n).\n\nIt is guaranteed that the sum of all n over all test cases does not exceed 5000.", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> [n] <n> <L_n>", "<T_1>->[n] <n> <L_n>", "<L_i>-><L_i-1> <n> m_i <s> p_i", "<L_1>->m_1 <s> p_1"], "constraints": ["1<=t<=5000", "1<=n<=5000", "1<=p_i<=10^9", "0<=m_i<n"]}}
{"name": "1288_C. Two Arrays", "description": "Input\n\nThe only line contains two integers n and m (1 <= n <= 1000, 1 <= m <= 10).", "grammar": {"productions": ["<S>->n <s> m"], "constraints": ["1<=n<=1000", "1<=m<=10"]}}
{"name": "992_C. Nastya and a Wardrobe", "description": "Input\n\nThe only line contains two integers x and k (0 <= x, k <= 1018), where x is the initial number of dresses and k + 1 is the number of months in a year in Byteland.", "grammar": {"productions": ["<S>->x <s> k"], "constraints": ["0<=x<=10^18", "0<=k<=10^18"]}}
{"name": "32_B. Borze", "description": "Ternary numeric notation is quite popular in Berland. To telegraph the ternary number the Borze alphabet is used. Digit 0 is transmitted as \u00ab.\u00bb, 1 as \u00ab-.\u00bb and 2 as \u00ab--\u00bb. You are to decode the Borze code, i.e. to find out the ternary number given its representation in Borze alphabet.\n\nInput\n\nThe first line contains a number in Borze code. The length of the string is between 1 and 200 characters. It's guaranteed that the given string is a valid Borze code of some ternary number (this number can have leading zeroes).", "grammar": {"productions": ["<S>->[.-]{1,200}"], "constraints": []}}
{"name": "1032_A. Kitchen Utensils", "description": "The king's birthday dinner was attended by k guests. The dinner was quite a success: every person has eaten several dishes (though the number of dishes was the same for every person) and every dish was served alongside with a new set of kitchen utensils.\n\nAll types of utensils in the kingdom are numbered from 1 to 100. It is known that every set of utensils is the same and consist of different types of utensils, although every particular type may appear in the set at most once. For example, a valid set of utensils can be composed of one fork, one spoon and one knife.\n\nAfter the dinner was over and the guests were dismissed, the king wondered what minimum possible number of utensils could be stolen. Unfortunately, the king has forgotten how many dishes have been served for every guest but he knows the list of all the utensils left after the dinner. Your task is to find the minimum possible number of stolen utensils.\n\nInput\n\nThe first line contains two integer numbers n and k (1 \u2264 n \u2264 100, 1 \u2264 k \u2264 100) \u2014 the number of kitchen utensils remaining after the dinner and the number of guests correspondingly.\n\nThe next line contains n integers a_1, a_2, \u2026, a_n (1 \u2264 a_i \u2264 100) \u2014 the types of the utensils remaining. Equal values stand for identical utensils while different values stand for different utensils.", "grammar": {"productions": ["<S>->[n] <s> k <n> <T_n>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1"], "constraints": ["1<=n<=100", "1<=k<=100", "1<=a_i<=100"]}}
{"name": "1215_B. The Number of Products", "description": "Input\n\nThe first line contains one integer n (1 <= n <= 2 * 10^{5}) --- the number of elements in the sequence.\n\nThe second line contains n integers a_1, a_2, ..., a_n (-10^{9} <= a_i <= 10^{9}; a_i != 0) --- the elements of the sequence.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1"], "constraints": ["1<=n<=200000", "-1000000000<=a_i<=1000000000", "a_i!=0"]}}
{"name": "p03834 AtCoder Beginner Contest 051 - Haiku", "description": "As a New Year's gift, Dolphin received a string s of length 19.\nThe string s has the following format: `[five lowercase English letters],[seven lowercase English letters],[five lowercase English letters]`.\nDolphin wants to convert the comma-separated string s into a space-separated string.\nWrite a program to perform the conversion for him.\n\nConstraints\n\n* The length of s is 19.\n* The sixth and fourteenth characters in s are `,`.\n* The other characters in s are lowercase English letters.\n\nInput\n\nThe input is given from Standard Input in the following format:\n\n\ns", "grammar": {"productions": ["<S>->[a-z]{5} , [a-z]{6} , [a-z]{5}"], "constraints": []}}
{"name": "318_A. Even Odds", "description": "Being a nonconformist, Volodya is displeased with the current state of things, particularly with the order of natural numbers (natural number is positive integer number). He is determined to rearrange them. But there are too many natural numbers, so Volodya decided to start with the first n. He writes down the following sequence of numbers: firstly all odd integers from 1 to n (in ascending order), then all even integers from 1 to n (also in ascending order). Help our hero to find out which number will stand at the position number k.\n\nInput\n\nThe only line of input contains integers n and k (1 \u2264 k \u2264 n \u2264 10^12).\n\nPlease, do not use the %lld specifier to read or write 64-bit integers in C++. It is preferred to use the cin, cout streams or the %I64d specifier.", "grammar": {"productions": ["<S>->n <s> k"], "constraints": ["1<=k<=n<=10^12"]}}
{"name": "98_B. Help King", "description": "Input\n\nThe first line contains a single integer n from the problem's statement (1 <= n <= 10000).", "grammar": {"productions": ["<S>->n"], "constraints": ["1<=n<=10000"]}}
{"name": "p02885 AtCoder Beginner Contest 143 - Curtain", "description": "The window of Takahashi's room has a width of A. There are two curtains hung over the window, each of which has a horizontal length of B. (Vertically, the curtains are long enough to cover the whole window.)\n\nWe will close the window so as to minimize the total horizontal length of the uncovered part of the window. Find the total horizontal length of the uncovered parts of the window then.\n\nConstraints\n\n* 1 \\leq A \\leq 100\n* 1 \\leq B \\leq 100\n* A and B are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nA B", "grammar": {"productions": ["<S>->A <s> B"], "constraints": ["1<=A<=100", "1<=B<=100"]}}
{"name": "p02700 AtCoder Beginner Contest 164 - Battle", "description": "Takahashi and Aoki will have a battle using their monsters.\n\nThe health and strength of Takahashi's monster are A and B, respectively, and those of Aoki's monster are C and D, respectively.\n\nThe two monsters will take turns attacking, in the order Takahashi's, Aoki's, Takahashi's, Aoki's, ... Here, an attack decreases the opponent's health by the value equal to the attacker's strength. The monsters keep attacking until the health of one monster becomes 0 or below. The person with the monster whose health becomes 0 or below loses, and the other person wins.\n\nIf Takahashi will win, print `Yes`; if he will lose, print `No`.\n\nConstraints\n\n* 1 \\leq A,B,C,D \\leq 100\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nA B C D", "grammar": {"productions": ["<S>->A <s> B <s> C <s> D"], "constraints": ["1<=A,B,C,D<=100"]}}
{"name": "p02603 M-SOLUTIONS Programming Contest 2020 - Road to Millionaire", "description": "Constraints\n\n* 2 <= N <= 80\n* 100 <= A_i <= 200\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\nA_1 A_2 ... A_N", "grammar": {"productions": ["<S>->[N] <n> <T_N>", "<T_i>-><T_i-1> <s> A_i", "<T_1>->A_1"], "constraints": ["2<=N<=80", "100<=A_i<=200"]}}
{"name": "p04012 AtCoder Beginner Contest 044 - Beautiful Strings", "description": "Let w be a string consisting of lowercase letters. We will call w beautiful if the following condition is satisfied:\n\n* Each lowercase letter of the English alphabet occurs even number of times in w.\n\n\n\nYou are given the string w. Determine if w is beautiful.\n\nConstraints\n\n* 1 \\leq |w| \\leq 100\n* w consists of lowercase letters (`a`-`z`).\n\nInput\n\nThe input is given from Standard Input in the following format:\n\n\nw", "grammar": {"productions": ["<S>->[a-z]{1,100}"], "constraints": []}}
{"name": "1455_E. Four Points", "description": "Input\n\nThe first line contains a single integer t (1 <= t <= 10^4) --- the number of test cases.\n\nEach test case consists of four lines. Each line contains two integers x and y (0 <= x, y <= 10^9) --- coordinates of one of the points p_i = (x, y).\n\nAll points are different in one test case.", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> x <s> y <n> x <s> y <n> x <s> y <n> x <s> y", "<T_1>->x <s> y <n> x <s> y <n> x <s> y <n> x <s> y"], "constraints": ["1<=t<=10^4", "0<=x,y<=10^9"]}}
{"name": "784_B. Kids' Riddle", "description": "Input\n\nThe input contains a single integer n (0 <= n <= 2000000000).", "grammar": {"productions": ["<S>->n"], "constraints": ["0<=n<=2000000000"]}}
{"name": "984_A. Game", "description": "Two players play a game.\n\nInitially there are n integers a_1, a_2, \u2026, a_n written on the board. Each turn a player selects one number and erases it from the board. This continues until there is only one number left on the board, i. e. n - 1 turns are made. The first player makes the first move, then players alternate turns.\n\nThe first player wants to minimize the last number that would be left on the board, while the second player wants to maximize it.\n\nYou want to know what number will be left on the board after n - 1 turns if both players make optimal moves.\n\nInput\n\nThe first line contains one integer n (1 \u2264 n \u2264 1000) \u2014 the number of numbers on the board.\n\nThe second line contains n integers a_1, a_2, \u2026, a_n (1 \u2264 a_i \u2264 10^6).", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1"], "constraints": ["1<=n<=1000", "1<=a_i<=10^6"]}}
{"name": "p00366 Electronic Metronome", "description": "Input\n\nThe input is given in the following format.\n\n\nN\nt_1\nt_2\n:\nt_N\n\n\nThe first line provides the number of metronomes N (1 <= N <= 105). Each of the subsequent N lines provides the preset ticking interval t_i (1 <= t_i <= 104) of the i-th metronome.", "grammar": {"productions": ["<S>->[N] <n> <T_N>", "<T_i>-><T_i-1> <n> t_i", "<T_1>->t_1"], "constraints": ["1<=N<=105", "1<=t_i<=10^4"]}}
{"name": "777_E. Hanoi Factory", "description": "Input\n\nThe first line of the input contains a single integer n (1 <= n <= 100 000) --- the number of rings in factory's stock.\n\nThe i-th of the next n lines contains three integers ai, bi and hi (1 <= ai, bi, hi <= 109, bi > ai) --- inner radius, outer radius and the height of the i-th ring respectively.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <n> a_i <s> b_i <s> h_i", "<T_1>->a_1 <s> b_1 <s> h_1"], "constraints": ["1<=n<=100000", "1<=a_i<=10^9", "1<=b_i<=10^9", "1<=h_i<=10^9"]}}
{"name": "1294_D. MEX maximizing", "description": "Input\n\nThe first line of the input contains two integers q, x (1 <= q, x <= 4 * 10^5) --- the number of queries and the value of x.\n\nThe next q lines describe queries. The j-th query consists of one integer y_j (0 <= y_j <= 10^9) and means that you have to append one element y_j to the array.", "grammar": {"productions": ["<S>->[q] <s> x <n> <T_q>", "<T_i>-><T_i-1> <n> y_i", "<T_1>->y_1"], "constraints": ["1<=q,x<=4*10^5", "0<=y_i<=10^9"]}}
{"name": "1291_B. Array Sharpening", "description": "Input\n\nThe input consists of multiple test cases. The first line contains a single integer t (1 <= t <= 15\\ 000) --- the number of test cases. The description of the test cases follows.\n\nThe first line of each test case contains a single integer n (1 <= n <= 3 * 10^5).\n\nThe second line of each test case contains a sequence of n non-negative integers a_1, ..., a_n (0 <= a_i <= 10^9).\n\nIt is guaranteed that the sum of n over all test cases does not exceed 3 * 10^5.", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> [n] <n> <L_n>", "<T_1>->[n] <n> <L_n>", "<L_i>-><L_i-1> <s> a_i", "<L_1>->a_i"], "constraints": ["1<=t<=15000", "1<=n<=3*10^5", "0<=a_i<=10^9"]}}
{"name": "985_E. Pencils and Boxes", "description": "Input\n\nThe first line contains three integer numbers n, k and d (1 <= k <= n <= 5\u00b7105, 0 <= d <= 109) --- the number of pencils, minimal size of any non-empty box and maximal difference in saturation between any pair of pencils in the same box, respectively.\n\nThe second line contains n integer numbers a1, a2, ..., an (1 <= ai <= 109) --- saturation of color of each pencil.", "grammar": {"productions": ["<S>->[n] <s> k <s> d <n> <T_n>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1"], "constraints": ["1<=k<=n<=500000", "0<=d<=1000000000", "1<=a_i<=1000000000"]}}
{"name": "1070_A. Find a Number", "description": "Input\n\nThe first line contains two positive integers d and s (1 <= d <= 500, 1 <= s <= 5000) separated by space.", "grammar": {"productions": ["<S>->d <s> s"], "constraints": ["1<=d<=500", "1<=s<=5000"]}}
{"name": "p01497 Bubble Puzzle", "description": "Input\n\nThe input consists of 4 lines, each contains 4 nonnegative integers smaller than 5. Each integer describes the initial states of bubbles on grid squares. 0 indicates that the corresponding square is empty.", "grammar": {"productions": ["<S>->[0-4]{1} <s> [0-4]{1} <s> [0-4]{1} <s> [0-4]{1} <n> [0-4]{1} <s> [0-4]{1} <s> [0-4]{1} <s> [0-4]{1} <n> [0-4]{1} <s> [0-4]{1} <s> [0-4]{1} <s> [0-4]{1} <n> [0-4]{1} <s> [0-4]{1} <s> [0-4]{1} <s> [0-4]{1}"], "constraints": ["0<=integer<=4"]}}
{"name": "1392_B. Omkar and Infinity Clock", "description": "Being stuck at home, Ray became extremely bored. To pass time, he asks Lord Omkar to use his time bending power: Infinity Clock! However, Lord Omkar will only listen to mortals who can solve the following problem:\n\nYou are given an array a of n integers. You are also given an integer k. Lord Omkar wants you to do k operations with this array.\n\nDefine one operation as the following: \n\n  1. Set d to be the maximum value of your array. \n  2. For every i from 1 to n, replace a_{i} with d-a_{i}. \n\n\n\nThe goal is to predict the contents in the array after k operations. Please help Ray determine what the final sequence will look like!\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe first line of each test case contains two integers n and k (1 \u2264 n \u2264 2 \u22c5 10^5, 1 \u2264 k \u2264 10^{18}) \u2013 the length of your array and the number of operations to perform.\n\nThe second line of each test case contains n integers a_{1},a_{2},...,a_{n} (-10^9 \u2264 a_{i} \u2264 10^9) \u2013 the initial contents of your array.\n\nIt is guaranteed that the sum of n over all test cases does not exceed 2 \u22c5 10^5.", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> [n] <s> k <n> <L_n>", "<T_1>->[n] <s> k <n> <L_n>", "<L_i>-><L_i-1> <s> a_i", "<L_1>->a_1"], "constraints": ["1<=t<=100", "1<=n<=2*10^5", "1<=k<=10^18", "-10^9<=a_i<=10^9"]}}
{"name": "1172_F. Nauuo and Bug", "description": "Input\n\nThe first line contains three integers n, m, p (1 <= n <= 10^6, 1 <= m <= 2 * 10^5, 1 <= p <= 10^9) --- the length of the given array, the number of queries and the modulus. Note that the modulus is used only in the ModAdd function.\n\nThe second line contains n integers a_1,a_2,...,a_n (-10^9<= a_i<=10^9) --- the given array.\n\nIn the following m lines, each line contains two integers l, r (1<= l<= r<= n) --- you have to calculate the result of Sum(a,l,r,p).", "grammar": {"productions": ["<S>->[n] <s> [m] <s> p <n> <T_n> <n> <Q_m>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1", "<Q_i>-><Q_i-1> <n> l <s> r", "<Q_1>->l <s> r"], "constraints": ["1<=n<=10^6", "1<=m<=2*10^5", "1<=p<=10^9", "-10^9<=a_i<=10^9", "1<=l<=r", "1<=r<=n"]}}
{"name": "p02995 AtCoder Beginner Contest 131 - Anti-Division", "description": "You are given four integers A, B, C, and D. Find the number of integers between A and B (inclusive) that can be evenly divided by neither C nor D.\n\nConstraints\n\n* 1\\leq A\\leq B\\leq 10^{18}\n* 1\\leq C,D\\leq 10^9\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nA B C D", "grammar": {"productions": ["<S>->A <s> B <s> C <s> D"], "constraints": ["1<=A<=10^18", "A<=B<=10^18", "1<=C<=10^9", "1<=D<=10^19"]}}
{"name": "p03849 AtCoder Regular Contest 066 - Xor Sum", "description": "Constraints\n\n* 1<=N<=10^{18}\n\nInput\n\nThe input is given from Standard Input in the following format:\n\n\nN", "grammar": {"productions": ["<S>->[N]"], "constraints": ["1<=N<=10^18"]}}
{"name": "p02578 AtCoder Beginner Contest 176 - Step", "description": "N persons are standing in a row. The height of the i-th person from the front is A_i.\n\nWe want to have each person stand on a stool of some heights - at least zero - so that the following condition is satisfied for every person:\n\nCondition: Nobody in front of the person is taller than the person. Here, the height of a person includes the stool.\n\nFind the minimum total height of the stools needed to meet this goal.\n\nConstraints\n\n* 1 \\leq N \\leq 2\\times 10^5\n* 1 \\leq A_i \\leq 10^9\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\nA_1 \\ldots A_N", "grammar": {"productions": ["<S>->[N] <n> <T_N>", "<T_i>-><T_i-1> <s> A_i", "<T_1>->A_1"], "constraints": ["1<=N<=2*10^5", "1<=A_i<=10^9"]}}
{"name": "1099_B. Squares and Segments", "description": "Little Sofia is in fourth grade. Today in the geometry lesson she learned about segments and squares. On the way home, she decided to draw n squares in the snow with a side length of 1. For simplicity, we assume that Sofia lives on a plane and can draw only segments of length 1, parallel to the coordinate axes, with vertices at integer points.\n\nIn order to draw a segment, Sofia proceeds as follows. If she wants to draw a vertical segment with the coordinates of the ends (x, y) and (x, y+1). Then Sofia looks if there is already a drawn segment with the coordinates of the ends (x', y) and (x', y+1) for some x'. If such a segment exists, then Sofia quickly draws a new segment, using the old one as a guideline. If there is no such segment, then Sofia has to take a ruler and measure a new segment for a long time. Same thing happens when Sofia wants to draw a horizontal segment, but only now she checks for the existence of a segment with the same coordinates x, x+1 and the differing coordinate y.\n\nFor example, if Sofia needs to draw one square, she will have to draw two segments using a ruler: \n\n<image>\n\nAfter that, she can draw the remaining two segments, using the first two as a guide: \n\n<image>\n\nIf Sofia needs to draw two squares, she will have to draw three segments using a ruler: \n\n<image>\n\nAfter that, she can draw the remaining four segments, using the first three as a guide: \n\n<image>\n\nSofia is in a hurry, so she wants to minimize the number of segments that she will have to draw with a ruler without a guide. Help her find this minimum number.\n\nInput\n\nThe only line of input contains a single integer n (1 \u2264 n \u2264 10^{9}), the number of squares that Sofia wants to draw.", "grammar": {"productions": ["<S>->n"], "constraints": ["1<=n<=10^9"]}}
{"name": "435_B. Pasha Maximizes", "description": "Input\n\nThe single line contains two integers a and k (1 <= a <= 1018; 0 <= k <= 100).", "grammar": {"productions": ["<S>->a <s> k"], "constraints": ["1<=a<=10^18", "0<=k<=100"]}}
{"name": "615_E. Hexagons", "description": "Input\n\nThe only line of the input contains integer n (0 <= n <=10^18) --- the number of Ayrat's moves.", "grammar": {"productions": ["<S>->n"], "constraints": ["0<=n<=10^18"]}}
{"name": "p03258 AtCoder Grand Contest 027 - ABBreviate", "description": "Constraints\n\n* 1 <= |s| <= 10^5\n* s consists of `a` and `b`.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\ns", "grammar": {"productions": ["<S>->[ab]{1,10^5}"], "constraints": [""]}}
{"name": "1339_C. Powered Addition", "description": "You have an array a of length n. For every positive integer x you are going to perform the following operation during the x-th second:\n\n  * Select some distinct indices i_{1}, i_{2}, \u2026, i_{k} which are between 1 and n inclusive, and add 2^{x-1} to each corresponding position of a. Formally, a_{i_{j}} := a_{i_{j}} + 2^{x-1} for j = 1, 2, \u2026, k. Note that you are allowed to not select any indices at all.\n\n\n\nYou have to make a nondecreasing as fast as possible. Find the smallest number T such that you can make the array nondecreasing after at most T seconds.\n\nArray a is nondecreasing if and only if a_{1} \u2264 a_{2} \u2264 \u2026 \u2264 a_{n}.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^{4}) \u2014 the number of test cases.\n\nThe first line of each test case contains single integer n (1 \u2264 n \u2264 10^{5}) \u2014 the length of array a. It is guaranteed that the sum of values of n over all test cases in the input does not exceed 10^{5}.\n\nThe second line of each test case contains n integers a_{1}, a_{2}, \u2026, a_{n} (-10^{9} \u2264 a_{i} \u2264 10^{9}).", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> [n] <n> <L_n>", "<T_1>->[n] <n> <L_n>", "<L_i>-><L_i-1> <s> a_i", "<L_1>->a_1"], "constraints": ["1<=t<=10^4", "1<=n<=10^5", "-10^9<=a_i<=10^9"]}}
{"name": "p01646 Dictionary", "description": "Input\n\nThe input consists of multiple datasets. Each dataset is formatted as follows:\n\n\nn\nstring_1\n...\nstring_n\n\n\nEach dataset consists of n+1 lines. The first line of each dataset contains an integer that indicates n (1 <= n <= 500). The i-th line of the following n lines contains string_i, which consists of up to 10 English lowercase letters.\n\nThe end of the input is `0`, and this should not be processed.", "grammar": {"productions": ["<S>->[n] <n> <T_n> | 0", "<T_i>-><T_i-1> <n> [a-z]{1,10}", "<T_1>->[a-z]{1,10}"], "constraints": ["1<=n<=500"]}}
{"name": "438_A. The Child and Toy", "description": "Input\n\nThe first line contains two integers n and m (1 <= n <= 1000; 0 <= m <= 2000). The second line contains n integers: v1, v2, ..., vn (0 <= vi <= 105). Then followed m lines, each line contains two integers xi and yi, representing a rope from part xi to part yi (1 <= xi, yi <= n; xi != yi).\n\nConsider all the parts are numbered from 1 to n.", "grammar": {"productions": ["<S>->[n] <s> [m] <n> <T_n> <n> <L_m>", "<T_i>-><T_i-1> <s> v_i", "<T_1>->v_i", "<L_i>-><L_i-1> <n> x_i <s> y_i", "<L_1>->x_1 <s> y_1"], "constraints": ["1<=n<=1000", "0<=m<=2000", "0<=[v_i]<=100000", "1<=xi,yi<=n"]}}
{"name": "p00015 National Budget", "description": "Input\n\nInput consists of several datasets. In the first line, the number of datasets N (1 <= N <= 50) is given. Each dataset consists of 2 lines:\n\n\nThe first integer\nThe second integer\n\n\nThe integer has at most 100 digits.", "grammar": {"productions": ["<S>->[N] <n> <T_N>", "<T_i>-><T_i-1> <n> [0-9]{1,100} <n> [0-9]{1,100}", "<T_1>->[0-9]{1,100} <n> [0-9]{1,100}"], "constraints": ["1<=N<=50"]}}
{"name": "1157_B. Long Number", "description": "You are given a long decimal number a consisting of n digits from 1 to 9. You also have a function f that maps every digit from 1 to 9 to some (possibly the same) digit from 1 to 9.\n\nYou can perform the following operation no more than once: choose a non-empty contiguous subsegment of digits in a, and replace each digit x from this segment with f(x). For example, if a = 1337, f(1) = 1, f(3) = 5, f(7) = 3, and you choose the segment consisting of three rightmost digits, you get 1553 as the result.\n\nWhat is the maximum possible number you can obtain applying this operation no more than once?\n\nInput\n\nThe first line contains one integer n (1 \u2264 n \u2264 2 \u22c5 10^5) \u2014 the number of digits in a.\n\nThe second line contains a string of n characters, denoting the number a. Each character is a decimal digit from 1 to 9.\n\nThe third line contains exactly 9 integers f(1), f(2), ..., f(9) (1 \u2264 f(i) \u2264 9).", "grammar": {"productions": ["<S>->[n] <n> [1-9]{n} <n> [1-9]{1} <s> [1-9]{1} <s> [1-9]{1} <s> [1-9]{1} <s> [1-9]{1} <s> [1-9]{1} <s> [1-9]{1} <s> [1-9]{1} <s> [1-9]{1}"], "constraints": ["1<=n<=2*10^5"]}}
{"name": "322_B. Ciel and Flowers", "description": "Input\n\nThe first line contains three integers r, g and b (0 <= r, g, b <=10^9) --- the number of red, green and blue flowers.", "grammar": {"productions": ["<S>->r <s> g <s> b"], "constraints": ["0<=r,g,b<=10^9"]}}
{"name": "p02472 Addition of Big Integers", "description": "Input\n\nTwo integers $A$ and $B$ separated by a space character are given in a line.", "grammar": {"productions": ["<S>->A <s> B"], "constraints": ["-10^100000<=A,B<=10^100000"]}}
{"name": "1144_A. Diverse Strings", "description": "A string is called diverse if it contains consecutive (adjacent) letters of the Latin alphabet and each letter occurs exactly once. For example, the following strings are diverse: \"fced\", \"xyz\", \"r\" and \"dabcef\". The following string are not diverse: \"az\", \"aa\", \"bad\" and \"babc\". Note that the letters 'a' and 'z' are not adjacent.\n\nFormally, consider positions of all letters in the string in the alphabet. These positions should form contiguous segment, i.e. they should come one by one without any gaps. And all letters in the string should be distinct (duplicates are not allowed).\n\nYou are given a sequence of strings. For each string, if it is diverse, print \"Yes\". Otherwise, print \"No\".\n\nInput\n\nThe first line contains integer n (1 \u2264 n \u2264 100), denoting the number of strings to process. The following n lines contains strings, one string per line. Each string contains only lowercase Latin letters, its length is between 1 and 100, inclusive.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <n> [a-z]{1,100}", "<T_1>->[a-z]{1,100}"], "constraints": ["1<=n<=100"]}}
{"name": "p03767 AtCoder Grand Contest 012 - AtCoder Group Contest", "description": "There are 3N participants in AtCoder Group Contest. The strength of the i-th participant is represented by an integer a_i. They will form N teams, each consisting of three participants. No participant may belong to multiple teams.\n\nThe strength of a team is defined as the second largest strength among its members. For example, a team of participants of strength 1, 5, 2 has a strength 2, and a team of three participants of strength 3, 2, 3 has a strength 3.\n\nFind the maximum possible sum of the strengths of N teams.\n\nConstraints\n\n* 1 \u2264 N \u2264 10^5\n* 1 \u2264 a_i \u2264 10^{9}\n* a_i are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\na_1 a_2 ... a_{3N}", "grammar": {"productions": ["<S>->[N] <n> <T_3N>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1"], "constraints": ["1<=N<=10^5", "1<=a_i<=10^9"]}}
{"name": "1025_C. Plasticine zebra", "description": "Input\n\nThe only line contains a string s (1 <= |s| <= 10^5, where |s| denotes the length of the string s) comprised of lowercase English letters 'b' and 'w' only, where 'w' denotes a white piece and 'b' denotes a black piece.", "grammar": {"productions": ["<S>->[bw]{1,100000}"], "constraints": [""]}}
{"name": "1303_B. National Project", "description": "Your company was appointed to lay new asphalt on the highway of length n. You know that every day you can either repair one unit of the highway (lay new asphalt over one unit of the highway) or skip repairing.\n\nSkipping the repair is necessary because of the climate. The climate in your region is periodical: there are g days when the weather is good and if you lay new asphalt these days it becomes high-quality pavement; after that, the weather during the next b days is bad, and if you lay new asphalt these days it becomes low-quality pavement; again g good days, b bad days and so on.\n\nYou can be sure that you start repairing at the start of a good season, in other words, days 1, 2, ..., g are good.\n\nYou don't really care about the quality of the highway, you just want to make sure that at least half of the highway will have high-quality pavement. For example, if the n = 5 then at least 3 units of the highway should have high quality; if n = 4 then at least 2 units should have high quality.\n\nWhat is the minimum number of days is needed to finish the repair of the whole highway?\n\nInput\n\nThe first line contains a single integer T (1 \u2264 T \u2264 10^4) \u2014 the number of test cases.\n\nNext T lines contain test cases \u2014 one per line. Each line contains three integers n, g and b (1 \u2264 n, g, b \u2264 10^9) \u2014 the length of the highway and the number of good and bad days respectively.", "grammar": {"productions": ["<S>->[T] <n> <T_T>", "<T_i>-><T_i-1> <n> n <s> g <s> b", "<T_1>->n <s> g <s> b"], "constraints": ["1<=T<=10^4", "1<=n<=10^9", "1<=g<=10^9", "1<=b<=10^9"]}}
{"name": "p03089 AtCoder Grand Contest 032 - Limited Insertion", "description": "Snuke has an empty sequence a.\n\nHe will perform N operations on this sequence.\n\nIn the i-th operation, he chooses an integer j satisfying 1 \\leq j \\leq i, and insert j at position j in a (the beginning is position 1).\n\nYou are given a sequence b of length N. Determine if it is possible that a is equal to b after N operations. If it is, show one possible sequence of operations that achieves it.\n\nConstraints\n\n* All values in input are integers.\n* 1 \\leq N \\leq 100\n* 1 \\leq b_i \\leq N\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\nb_1 \\dots b_N", "grammar": {"productions": ["<S>->[N] <n> <T_N>", "<T_i>-><T_i-1> <s> b_i", "<T_1>->b_1"], "constraints": ["1<=N<=100", "1<=b_i<=N"]}}
{"name": "p02791 AtCoder Beginner Contest 152 - Low Elements", "description": "Given is a permutation P_1, \\ldots, P_N of 1, \\ldots, N. Find the number of integers i (1 \\leq i \\leq N) that satisfy the following condition:\n\n* For any integer j (1 \\leq j \\leq i), P_i \\leq P_j.\n\nConstraints\n\n* 1 \\leq N \\leq 2 \\times 10^5\n* P_1, \\ldots, P_N is a permutation of 1, \\ldots, N.\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\nP_1 ... P_N", "grammar": {"productions": ["<S>->[N] <n> <T_N>", "<T_i>-><T_i-1> <s> P_i", "<T_1>->P_1"], "constraints": ["1<=N<=2*10^5", "1<=P_i<=N", "P_i!=P_j"]}}
{"name": "p02712 AtCoder Beginner Contest 162 - FizzBuzz Sum", "description": "Let us define the FizzBuzz sequence a_1,a_2,... as follows:\n\n* If both 3 and 5 divides i, a_i=\\mbox{FizzBuzz}.\n* If the above does not hold but 3 divides i, a_i=\\mbox{Fizz}.\n* If none of the above holds but 5 divides i, a_i=\\mbox{Buzz}.\n* If none of the above holds, a_i=i.\n\n\n\nFind the sum of all numbers among the first N terms of the FizzBuzz sequence.\n\nConstraints\n\n* 1 \\leq N \\leq 10^6\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN", "grammar": {"productions": ["<S>->N"], "constraints": ["1<=N<=10^6"]}}
{"name": "1015_D. Walking Between Houses", "description": "Input\n\nThe first line of the input contains three integers n, k, s (2 <= n <= 10^9, 1 <= k <= 2 * 10^5, 1 <= s <= 10^{18}) --- the number of houses, the number of moves and the total distance you want to walk.", "grammar": {"productions": ["<S>->n <s> k <s> s"], "constraints": ["2<=n<=10^9", "1<=k<=2*10^5", "1<=s<=10^18"]}}
{"name": "1183_C. Computer Game", "description": "Vova is playing a computer game. There are in total n turns in the game and Vova really wants to play all of them. The initial charge of his laptop battery (i.e. the charge before the start of the game) is k.\n\nDuring each turn Vova can choose what to do: \n\n  * If the current charge of his laptop battery is strictly greater than a, Vova can just play, and then the charge of his laptop battery will decrease by a; \n  * if the current charge of his laptop battery is strictly greater than b (b<a), Vova can play and charge his laptop, and then the charge of his laptop battery will decrease by b; \n  * if the current charge of his laptop battery is less than or equal to a and b at the same time then Vova cannot do anything and loses the game. \n\n\n\nRegardless of Vova's turns the charge of the laptop battery is always decreases.\n\nVova wants to complete the game (Vova can complete the game if after each of n turns the charge of the laptop battery is strictly greater than 0). Vova has to play exactly n turns. Among all possible ways to complete the game, Vova wants to choose the one where the number of turns when he just plays (first type turn) is the maximum possible. It is possible that Vova cannot complete the game at all.\n\nYour task is to find out the maximum possible number of turns Vova can just play (make the first type turn) or report that Vova cannot complete the game.\n\nYou have to answer q independent queries.\n\nInput\n\nThe first line of the input contains one integer q (1 \u2264 q \u2264 10^5) \u2014 the number of queries. Each query is presented by a single line.\n\nThe only line of the query contains four integers k, n, a and b (1 \u2264 k, n \u2264 10^9, 1 \u2264 b < a \u2264 10^9) \u2014 the initial charge of Vova's laptop battery, the number of turns in the game and values a and b, correspondingly.", "grammar": {"productions": ["<S>->[q] <n> <T_q>", "<T_i>-><T_i-1> <n> k <s> n <s> a <s> b", "<T_1>->k <s> n <s> a <s> b"], "constraints": ["1<=q<=10^5", "1<=k<=10^9", "1<=n<=10^9", "1<=b<a<=10^9"]}}
{"name": "1362_B. Johnny and His Hobbies", "description": "Among Johnny's numerous hobbies, there are two seemingly harmless ones: applying bitwise operations and sneaking into his dad's office. As it is usually the case with small children, Johnny is unaware that combining these two activities can get him in a lot of trouble.\n\nThere is a set S containing very important numbers on his dad's desk. The minute Johnny heard about it, he decided that it's a good idea to choose a positive integer k and replace each element s of the set S with s \u2295 k (\u2295 denotes the [exclusive or](https://en.wikipedia.org/wiki/Exclusive_or#Computer_science) operation). \n\nHelp him choose such k that Johnny's dad will not see any difference after his son is done playing (i.e. Johnny will get the same set as before playing). It is possible that no such number exists. It is also possible that there are many of them. In such a case, output the smallest one. Note that the order of elements in a set doesn't matter, i.e. set \\{1, 2, 3\\} equals to set \\{2, 1, 3\\}.\n\nFormally, find the smallest positive integer k such that \\\\{s \u2295 k | s \u2208 S\\} = S or report that there is no such number.\n\nFor example, if S = \\{1, 3, 4\\} and k = 2, new set will be equal to \\{3, 1, 6\\}. If S = \\{0, 1, 2, 3\\} and k = 1, after playing set will stay the same.\n\nInput\n\nIn the first line of input, there is a single integer t (1 \u2264 t \u2264 10^24), the number of test cases. In the next lines, t test cases follow. Each of them consists of two lines. \n\nIn the first line there is a single integer n (1 \u2264 n \u2264 10^24) denoting the number of elements in set S. Second line consists of n distinct integers s_i (0 \u2264 s_i < 10^24), elements of S.\n\nIt is guaranteed that the sum of n over all test cases will not exceed 10^24.", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> [n] <n> <L_n>", "<T_1>->[n] <n> <L_n>", "<L_i>-><L_i-1> <s> s_i", "<L_1>->s_1"], "constraints": ["1<=t<=1024", "1<=n<=1024", "0<=s_i<=1024"]}}
{"name": "p02934 AtCoder Beginner Contest 138 - Resistors in Parallel", "description": "Given is a sequence of N integers A_1, \\ldots, A_N.\n\nFind the (multiplicative) inverse of the sum of the inverses of these numbers, \\frac{1}{\\frac{1}{A_1} + \\ldots + \\frac{1}{A_N}}.\n\nConstraints\n\n* 1 \\leq N \\leq 100\n* 1 \\leq A_i \\leq 1000\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\nA_1 A_2 \\ldots A_N", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <s> A_i", "<T_1>->A_1"], "constraints": ["1<=n<=100", "1<=A_i<=1000"]}}
{"name": "1506_F. Triangular Paths", "description": "Input\n\nThe first line contains one integer t (1 <= t <= 10^4) is the number of test cases. Then t test cases follow.\n\nEach test case begins with a line containing one integer n (1 <= n <= 2 * 10^5) is the number of points to visit.\n\nThe second line contains n numbers r_1, r_2, ..., r_n (1 <= r_i <= 10^9), where r_i is the number of the layer in which i-th point is located.\n\nThe third line contains n numbers c_1, c_2, ..., c_n (1 <= c_i <= r_i), where c_i is the number of the i-th point in the r_i layer.\n\nIt is guaranteed that all n points are distinct.\n\nIt is guaranteed that there is always at least one way to traverse all n points.\n\nIt is guaranteed that the sum of n over all test cases does not exceed 2 * 10^5.", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> [n] <n> <L_n> <n> <Z_n>", "<T_1>->[n] <n> <L_n> <n> <Z_n>", "<L_i>-><T_i-1> <s> r_i", "<L_1>->r_1", "<Z_i>-><L_i-1> <s> c_i", "<Z_1>->c_1"], "constraints": ["1<=t<=10^4", "1<=n<=2*10^5", "1<=r_i<=10^9", "1<=c_i<=r_i"]}}
{"name": "1176_B. Merge it!", "description": "You are given an array a consisting of n integers a_1, a_2, ... , a_n.\n\nIn one operation you can choose two elements of the array and replace them with the element equal to their sum (it does not matter where you insert the new element). For example, from the array [2, 1, 4] you can obtain the following arrays: [3, 4], [1, 6] and [2, 5].\n\nYour task is to find the maximum possible number of elements divisible by 3 that are in the array after performing this operation an arbitrary (possibly, zero) number of times.\n\nYou have to answer t independent queries.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 the number of queries.\n\nThe first line of each query contains one integer n (1 \u2264 n \u2264 100).\n\nThe second line of each query contains n integers a_1, a_2, ... , a_n (1 \u2264 a_i \u2264 10^9).", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> [n] <n> <L_n>", "<T_1>->[n] <n> <L_n>", "<L_i>-><L_i-1> <s> a_i", "<L_1>->a_1"], "constraints": ["1<=t<=1000", "1<=n<=100", "1<=a_i<=10^9"]}}
{"name": "822_E. Liar", "description": "Input\n\nThe first line contains single integer n (1 <= n <= 105) --- length of sausage bought by Leha, i.e. the length of the string s.\n\nThe second line contains string s of the length n consisting of lowercase English letters.\n\nThe third line contains single integer m (1 <= m <= n) --- length of sausage bought by Noora, i.e. the length of the string t.\n\nThe fourth line contains string t of the length m consisting of lowercase English letters.\n\nThe fifth line contains single integer x (1 <= x <= 30) --- the maximum number of pieces of sausage that Leha can glue so that Noora doesn't notice anything.", "grammar": {"productions": ["<S>->[n] <n> [a-z]{n} <n> [m] <n> [a-z]{m} <n> x"], "constraints": ["1<=n<=105", "1<=m<=n", "1<=x<=30"]}}
{"name": "1354_B. Ternary String", "description": "You are given a string s such that each its character is either 1, 2, or 3. You have to choose the shortest contiguous substring of s such that it contains each of these three characters at least once.\n\nA contiguous substring of string s is a string that can be obtained from s by removing some (possibly zero) characters from the beginning of s and some (possibly zero) characters from the end of s.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 20000) \u2014 the number of test cases.\n\nEach test case consists of one line containing the string s (1 \u2264 |s| \u2264 200000). It is guaranteed that each character of s is either 1, 2, or 3.\n\nThe sum of lengths of all strings in all test cases does not exceed 200000.", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> [1-3]{1,2000000}", "<T_1>->[1-3]{1,2000000}"], "constraints": ["1<=t<=200000"]}}
{"name": "569_D. Symmetric and Transitive", "description": "Input\n\nA single line contains a single integer n (1 <= n <= 4000).", "grammar": {"productions": ["<S>->n"], "constraints": ["1<=n<=4000"]}}
{"name": "p02630 AtCoder Beginner Contest 171 - Replacing", "description": "You have a sequence A composed of N positive integers: A_{1}, A_{2}, \\cdots, A_{N}.\n\nYou will now successively do the following Q operations:\n\n* In the i-th operation, you replace every element whose value is B_{i} with C_{i}.\n\n\n\nFor each i (1 \\leq i \\leq Q), find S_{i}: the sum of all elements in A just after the i-th operation.\n\nConstraints\n\n* All values in input are integers.\n* 1 \\leq N, Q, A_{i}, B_{i}, C_{i} \\leq 10^{5}\n* B_{i} \\neq C_{i}\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\nA_{1} A_{2} \\cdots A_{N}\nQ\nB_{1} C_{1}\nB_{2} C_{2}\n\\vdots\nB_{Q} C_{Q}", "grammar": {"productions": ["<S>->[N] <n> <T_N> <n> [Q] <n> <L_Q>", "<T_i>-><T_i-1> <s> A_i", "<T_1>->A_1", "<L_i>-><L_i-1> <n> B_i <s> C_i", "<L_1>->B_1 <s> C_1"], "constraints": ["1<=N,Q,A_i,B_i,C_i<=10^5", "B_i!=C_i"]}}
{"name": "p03777 AtCoder Beginner Contest 056 - HonestOrDishonest", "description": "Two deer, AtCoDeer and TopCoDeer, are playing a game called Honest or Dishonest. In this game, an honest player always tells the truth, and an dishonest player always tell lies. You are given two characters a and b as the input. Each of them is either `H` or `D`, and carries the following information:\n\nIf a=`H`, AtCoDeer is honest; if a=`D`, AtCoDeer is dishonest. If b=`H`, AtCoDeer is saying that TopCoDeer is honest; if b=`D`, AtCoDeer is saying that TopCoDeer is dishonest.\n\nGiven this information, determine whether TopCoDeer is honest.\n\nConstraints\n\n* a=`H` or a=`D`.\n* b=`H` or b=`D`.\n\nInput\n\nThe input is given from Standard Input in the following format:\n\n\na b", "grammar": {"productions": ["<S>->[HD]{1} <s> [HD]{1}"], "constraints": [""]}}
{"name": "393_A. Nineteen", "description": "Input\n\nThe first line contains a non-empty string s, consisting only of lowercase English letters. The length of string s doesn't exceed 100.", "grammar": {"productions": ["<S>->[a-z]{1,100}"], "constraints": ["1<=length(s)<=100"]}}
{"name": "167_C. Wizards and Numbers", "description": "Input\n\nThe first line contains a single integer t --- the number of input data sets (1 <= t <= 104). Each of the next t lines contains two integers a, b (0 <= a, b <= 1018). The numbers are separated by a space.\n\nPlease do not use the %lld specificator to read or write 64-bit integers in \u0421++. It is preferred to use the cin, cout streams or the %I64d specificator.", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> a <s> b", "<T_1>->a <s> b"], "constraints": ["1<=t<=10^4", "0<=a,b<=10^18"]}}
{"name": "p03194 CADDi 2018 for Beginners - Product and GCD", "description": "Constraints\n\n* 1 <= N <= 10^{12}\n* 1 <= P <= 10^{12}\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN P", "grammar": {"productions": ["<S>->N <s> P"], "constraints": ["1<=N<=10^12", "1<=P<=10^12"]}}
{"name": "1242_A. Tile Painting", "description": "Input\n\nThe first line of input contains a single integer n (1 <= n <= 10^{12}), the length of the path.", "grammar": {"productions": ["<S>->n"], "constraints": ["1<=n<=10^12"]}}
{"name": "592_E. BCPC", "description": "Input\n\nIn the first line of the input three integers n, c and d (3 <= n <= 345678, 1 <= c, d <= 109) are written. They denote the number of students Blenda can use to form teams, the value subtracted from all reading speeds and the value subtracted from all writing speeds respectively.\n\nEach of the next n lines contains two integers ri and wi (0 < ri, wi <= 109, |ri - c| + |wi - d| > 0). There are no two students, such that both their reading and writing speeds coincide, i.e. for every i != j condition |ri - rj| + |wi - wj| > 0 holds.", "grammar": {"productions": ["<S>->[n] <s> c <s> d <n> <T_n>", "<T_i>-><T_i-1> <n> r_i <s> w_i", "<T_1>->r_1 <s> w_1"], "constraints": ["3<=n<=345678", "1<=c,d<=10^9", "0<r_i,w_i<=10^9"]}}
{"name": "69_A. Young Physicist", "description": "A guy named Vasya attends the final grade of a high school. One day Vasya decided to watch a match of his favorite hockey team. And, as the boy loves hockey very much, even more than physics, he forgot to do the homework. Specifically, he forgot to complete his physics tasks. Next day the teacher got very angry at Vasya and decided to teach him a lesson. He gave the lazy student a seemingly easy task: You are given an idle body in space and the forces that affect it. The body can be considered as a material point with coordinates (0; 0; 0). Vasya had only to answer whether it is in equilibrium. \"Piece of cake\" \u2014 thought Vasya, we need only to check if the sum of all vectors is equal to 0. So, Vasya began to solve the problem. But later it turned out that there can be lots and lots of these forces, and Vasya can not cope without your help. Help him. Write a program that determines whether a body is idle or is moving by the given vectors of forces.\n\nInput\n\nThe first line contains a positive integer n (1 \u2264 n \u2264 100), then follow n lines containing three integers each: the xi coordinate, the yi coordinate and the zi coordinate of the force vector, applied to the body ( - 100 \u2264 xi, yi, zi \u2264 100).", "grammar": {"productions": ["<S>->[N] <n> <T_N>", "<T_i>-><T_i-1> <n> X_i <s> Y_i <s> Z_i", "<T_1>->X_1 <s> Y_1 <s> Z_1"], "constraints": ["1<=N<=100", "-100<=X_i<=100", "-100<=Y_i<=100", "-100<=Z_i<=100"]}}
{"name": "459_E. Pashmak and Graph", "description": "Input\n\nThe first line contains two integers n, m (2 <= n <= 3\u00b7105; 1 <= m <= min(n\u00b7(n - 1), 3\u00b7105)). Then, m lines follows. The i-th line contains three space separated integers: ui, vi, wi (1 <= ui, vi <= n; 1 <= wi <= 105) which indicates that there's a directed edge with weight wi from vertex ui to vertex vi.\n\nIt's guaranteed that the graph doesn't contain self-loops and multiple edges.", "grammar": {"productions": ["<S>->[n] <s> [m] <n> <T_m>", "<T_i>-><T_i-1> <n> u_i <s> v_i <s> w_i", "<T_1>->u_1 <s> v_1 <s> w_1"], "constraints": ["2<=n<=3*10^5", "1<=m<=min(n*(n-1),3*10^5)", "1<=u_i,v_i<=n", "1<=w_i<=10^5", "u_i!=v_i"]}}
{"name": "961_F. k-substrings", "description": "Input\n\nThe first line contains one integer n (2 <= n <= 106) --- the length s.\n\nThe second line contains the string s consisting of n lowercase Latin letters.", "grammar": {"productions": ["<S>->[n] <n> [a-z]{n}"], "constraints": ["2<=n<=10^6"]}}
{"name": "p02678 AtCoder Beginner Contest 168 - .. (Double Dots)", "description": "There is a cave.\n\nThe cave has N rooms and M passages. The rooms are numbered 1 to N, and the passages are numbered 1 to M. Passage i connects Room A_i and Room B_i bidirectionally. One can travel between any two rooms by traversing passages. Room 1 is a special room with an entrance from the outside.\n\nIt is dark in the cave, so we have decided to place a signpost in each room except Room 1. The signpost in each room will point to one of the rooms directly connected to that room with a passage.\n\nSince it is dangerous in the cave, our objective is to satisfy the condition below for each room except Room 1.\n\n* If you start in that room and repeatedly move to the room indicated by the signpost in the room you are in, you will reach Room 1 after traversing the minimum number of passages possible.\n\n\n\nDetermine whether there is a way to place signposts satisfying our objective, and print one such way if it exists.\n\nConstraints\n\n* All values in input are integers.\n* 2 \\leq N \\leq 10^5\n* 1 \\leq M \\leq 2 \\times 10^5\n* 1 \\leq A_i, B_i \\leq N\\ (1 \\leq i \\leq M)\n* A_i \\neq B_i\\ (1 \\leq i \\leq M)\n* One can travel between any two rooms by traversing passages.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN M\nA_1 B_1\n:\nA_M B_M", "grammar": {"productions": ["<S>->N <s> [M] <n> <T_M>", "<T_i>-><T_i-1> <n> A_i <s> B_i", "<T_1>->A_1 <s> B_1"], "constraints": ["2<=N<=10^5", "1<=M<=2*10^5", "1<=A_i,B_i<=N", "A_i!=B_i"]}}
{"name": "p02409 Official House", "description": "You manage 4 buildings, each of which has 3 floors, each of which consists of 10 rooms. Write a program which reads a sequence of tenant/leaver notices, and reports the number of tenants for each room.\n\nFor each notice, you are given four integers b, f, r and v which represent that v persons entered to room r of fth floor at building b. If v is negative, it means that \u2212v persons left.\n\nAssume that initially no person lives in the building.\n\nConstraints\n\n* No incorrect building, floor and room numbers are given.\n* 0 \u2264 the number of tenants during the management \u2264 9\n\nInput\n\nIn the first line, the number of notices n is given. In the following n lines, a set of four integers b, f, r and v which represents ith notice is given in a line.", "grammar": {"productions": ["<S>->[N] <n> <T_N>", "<T_i>-><T_i-1> <n> b <s> f <s> r <s> v", "<T_1>->b <s> f <s> r <s> v"], "constraints": ["1<=N<=9", "1<=b<=4", "1<=f<=3", "1<=r<=10", "0<=v<9"]}}
{"name": "447_A. DZY Loves Hash", "description": "Input\n\nThe first line contains two integers, p and n (2 <= p, n <= 300). Then n lines follow. The i-th of them contains an integer xi (0 <= xi <=10^9).", "grammar": {"productions": ["<S>->p <s> [n] <n> <T_n>", "<T_i>-><T_i-1> <n> xi", "<T_1>->xi"], "constraints": ["2<=p,n<=300", "0<=xi<=10^9"]}}
{"name": "p04000 AtCoder Beginner Contest 045 - Snuke's Coloring", "description": "We have a grid with H rows and W columns. At first, all cells were painted white.\n\nSnuke painted N of these cells. The i-th ( 1 \\leq i \\leq N ) cell he painted is the cell at the a_i-th row and b_i-th column.\n\nCompute the following:\n\n* For each integer j ( 0 \\leq j \\leq 9 ), how many subrectangles of size 3\u00d73 of the grid contains exactly j black cells, after Snuke painted N cells?\n\nConstraints\n\n* 3 \\leq H \\leq 10^9\n* 3 \\leq W \\leq 10^9\n* 0 \\leq N \\leq min(10^5,H\u00d7W)\n* 1 \\leq a_i \\leq H (1 \\leq i \\leq N)\n* 1 \\leq b_i \\leq W (1 \\leq i \\leq N)\n* (a_i, b_i) \\neq (a_j, b_j) (i \\neq j)\n\nInput\n\nThe input is given from Standard Input in the following format:\n\n\nH W N\na_1 b_1\n:\na_N b_N", "grammar": {"productions": ["<S>->H <s> W <s> [N] <n> <T_N>", "<T_i>-><T_i-1> <n> a_i <s> b_i", "<T_1>->a_1 <s> b_1", "<T_0>->\u03b5"], "constraints": ["3<=H<=10^9", "3<=W<=10^9", "1<=a_i<=H", "1<=b_i<=W", "(a_i, b_i) != (a_j, b_j)", "i!=j", "0<=N<=min(10^5,(H*W))"]}}
{"name": "1500_B. Two chandeliers", "description": "Input\n\nThe first line contains three integers n, m and k (1 <= n, m <= 500 000; 1 <= k <= 10^{12}) --- the number of colors in the first and the second chandeliers and how many times colors should differ to anger Vasya.\n\nThe second line contains n different integers a_i (1 <= a_i <= 2 * max(n, m)) that describe the first chandelier's sequence of colors.\n\nThe third line contains m different integers b_j (1 <= b_i <= 2 * max(n, m)) that describe the second chandelier's sequence of colors.\n\nAt the i-th day, the first chandelier has a color a_x, where x = ((i - 1) mod n) + 1) and the second one has a color b_y, where y = ((i - 1) mod m) + 1).\n\nIt's guaranteed that sequence a differs from sequence b, so there are will be days when colors of chandeliers differs.", "grammar": {"productions": ["<S>->[n] <s> [m] <s> k <n> <T_n> <n> <L_m>", "<T_i>-><T_i-1> <s> a_i", "<L_i>-><L_i-1> <s> b_i", "<T_1>->a_1", "<L_1>->b_1"], "constraints": ["1<=n,m<=500000", "1<=k<=10^12", "1<=a_i<=2*max(n,m)", "1<=b_i<=2*max(n,m)"]}}
{"name": "76_E. Points", "description": "Input\n\nThe first line of input contains one integer number N (1 <= N <= 100 000) --- the number of points. Each of the following N lines contain two integer numbers X and Y ( - 10 000 <= X, Y <= 10 000) --- the coordinates of points. Two or more points may coincide.", "grammar": {"productions": ["<S>->[N] <n> <T_N>", "<T_i>-><T_i-1> <n> X <s> Y", "<T_1>->X <s> Y"], "constraints": ["1<=N<=100000", "-10000<=X,Y<=10000"]}}
{"name": "p02399 A / B Problem", "description": "Write a program which reads two integers a and b, and calculates the following values:\n\n* a \u00f7 b: d (in integer)\n* remainder of a \u00f7 b: r (in integer)\n* a \u00f7 b: f (in real number)\n\nConstraints\n\n* 1 \u2264 a, b \u2264 10^9\n\nInput\n\nTwo integers a and b are given in a line.", "grammar": {"productions": ["<S>->a <s> b"], "constraints": ["1<=a,b<=10^9"]}}
{"name": "1540_C1. Converging Array (Easy Version)", "description": "Input\n\nThe first line contains a single integer n (2 <= n <= 100).\n\nThe second line contains n integers c_1, c_2 ..., c_n (0 <= c_i <= 100).\n\nThe third line contains n-1 integers b_1, b_2, ..., b_{n-1} (0 <= b_i <= 100).\n\nThe fourth line contains a single integer q (q=1).\n\nThe fifth line contains q space separated integers x_1, x_2, ..., x_q (-10^5 <= x_i <= 10^5).", "grammar": {"productions": ["<S>->[n] <n> <T_n> <n> <L_n-1> <n> [1]{1} <n> <Z_q>", "<T_i>-><T_i-1> <s> c_i", "<T_1>->c_1", "<L_i>-><L_i-1> <s> b_i", "<L_1>->b_1", "<Z_i>-><Z_i-1> <s> x_i", "<Z_1>->x_1"], "constraints": ["2<=n<=100", "0<=c_i<=100", "0<=b_i<=100", "-10^5<=x_i<=10^5"]}}
{"name": "p03386 AtCoder Beginner Contest 093 - Small and Large Integers", "description": "Print all the integers that satisfies the following in ascending order:\n\n* Among the integers between A and B (inclusive), it is either within the K smallest integers or within the K largest integers.\n\nConstraints\n\n* 1 \\leq A \\leq B \\leq 10^9\n* 1 \\leq K \\leq 100\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nA B K", "grammar": {"productions": ["<S>->A <s> B <s> K"], "constraints": ["1<=A<=B<=10^9", "1<=K<=100"]}}
{"name": "1293_D. Aroma's Search", "description": "Input\n\nThe first line contains integers x_0, y_0, a_x, a_y, b_x, b_y (1 <= x_0, y_0 <= 10^{16}, 2 <= a_x, a_y <= 100, 0 <= b_x, b_y <= 10^{16}), which define the coordinates of the data nodes.\n\nThe second line contains integers x_s, y_s, t (1 <= x_s, y_s, t <= 10^{16}) -- the initial Aroma's coordinates and the amount of time available.", "grammar": {"productions": ["<S>->x0 <s> y0 <s> ax <s> ay <s> b_x <s> by <n> xs <s> ys <s> t"], "constraints": ["1<=x0,y0<=10^16", "2<=ax,ay<=100", "0<=bx,by<=10^16", "1<=xs,ys,t<=10^16"]}}
{"name": "p01991 Namo.. Cut", "description": "Input\n\n3\n1 2\n1 3\n2 3\n1\n1 3", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <n> a <s> b", "<T_1>->a <s> b"], "constraints": ["1<=n<=3", "1<=a,b<=3"]}}
{"name": "1150_A. Stock Arbitraging", "description": "Welcome to Codeforces Stock Exchange! We're pretty limited now as we currently allow trading on one stock, Codeforces Ltd. We hope you'll still be able to make profit from the market!\n\nIn the morning, there are n opportunities to buy shares. The i-th of them allows to buy as many shares as you want, each at the price of s_i bourles.\n\nIn the evening, there are m opportunities to sell shares. The i-th of them allows to sell as many shares as you want, each at the price of b_i bourles. You can't sell more shares than you have.\n\nIt's morning now and you possess r bourles and no shares.\n\nWhat is the maximum number of bourles you can hold after the evening?\n\nInput\n\nThe first line of the input contains three integers n, m, r (1 \u2264 n \u2264 30, 1 \u2264 m \u2264 30, 1 \u2264 r \u2264 1000) \u2014 the number of ways to buy the shares on the market, the number of ways to sell the shares on the market, and the number of bourles you hold now.\n\nThe next line contains n integers s_1, s_2, ..., s_n (1 \u2264 s_i \u2264 1000); s_i indicates the opportunity to buy shares at the price of s_i bourles.\n\nThe following line contains m integers b_1, b_2, ..., b_m (1 \u2264 b_i \u2264 1000); b_i indicates the opportunity to sell shares at the price of b_i bourles.", "grammar": {"productions": ["<S>->[n] <s> [m] <s> r <n> <T_n> <n> <L_m>", "<T_i>-><T_i-1> <s> s_i", "<T_1>->s_1", "<L_i>-><L_i-1> <s> b_i", "<L_1>->b_1"], "constraints": ["1<=n<=30", "1<=m<=30", "1<=r<=1000", "1<=s_i<=1000", "1<=b_i<=1000"]}}
{"name": "117_A. Elevator", "description": "Input\n\nThe first line contains two space-separated integers n and m (1 <= n <= 105, 2 <= m <= 108). \n\nNext n lines contain information about the participants in the form of three space-separated integers si fi ti (1 <= si, fi <= m, 0 <= ti <= 108), described in the problem statement.", "grammar": {"productions": ["<S>->[n] <s> m <n> <T_n>", "<T_i>-><T_i-1> <n> si <s> fi <s> ti", "<T_1>->si <s> fi <s> ti"], "constraints": ["1<=n<=105", "2<=m<=108", "1<=si,fi<=m", "0<=ti<=108"]}}
{"name": "851_B. Arpa and an exam about geometry", "description": "Input\n\nThe only line contains six integers ax, ay, bx, by, cx, cy (|ax|, |ay|, |bx|, |by|, |cx|, |cy| <= 109). It's guaranteed that the points are distinct.", "grammar": {"productions": ["<S>->ax <s> ay <s> bx <s> by <s> cx <s> cy"], "constraints": ["-10^9<=ax,ay,bx,by,cx,cy<=10^9"]}}
{"name": "1168_A. Increasing by Modulo", "description": "Input\n\nThe first line contains two integers n and m (1 <= n, m <= 300 000) --- the number of integers in the array and the parameter m.\n\nThe next line contains n space-separated integers a_1, a_2, ..., a_n (0 <= a_i < m) --- the given array.", "grammar": {"productions": ["<S>->[n] <s> m <n> <T_n>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1"], "constraints": ["1<=n,m<=30000", "0<=a_i<m"]}}
{"name": "732_A. Buy a Shovel", "description": "Polycarp urgently needs a shovel! He comes to the shop and chooses an appropriate one. The shovel that Policarp chooses is sold for k burles. Assume that there is an unlimited number of such shovels in the shop.\n\nIn his pocket Polycarp has an unlimited number of \"10-burle coins\" and exactly one coin of r burles (1 \u2264 r \u2264 9).\n\nWhat is the minimum number of shovels Polycarp has to buy so that he can pay for the purchase without any change? It is obvious that he can pay for 10 shovels without any change (by paying the requied amount of 10-burle coins and not using the coin of r burles). But perhaps he can buy fewer shovels and pay without any change. Note that Polycarp should buy at least one shovel.\n\nInput\n\nThe single line of input contains two integers k and r (1 \u2264 k \u2264 1000, 1 \u2264 r \u2264 9) \u2014 the price of one shovel and the denomination of the coin in Polycarp's pocket that is different from \"10-burle coins\". \n\nRemember that he has an unlimited number of coins in the denomination of 10, that is, Polycarp has enough money to buy any number of shovels.", "grammar": {"productions": ["<S>->k <s> r"], "constraints": ["1<=k<=1000", "1<=r<=9"]}}
{"name": "p02805 AtCoder Beginner Contest 151 - Enclose All", "description": "Given are N points (x_i, y_i) in a two-dimensional plane.\n\nFind the minimum radius of a circle such that all the points are inside or on it.\n\nConstraints\n\n* 2 \\leq N \\leq 50\n* 0 \\leq x_i \\leq 1000\n* 0 \\leq y_i \\leq 1000\n* The given N points are all different.\n* The values in input are all integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\nx_1 y_1\n:\nx_N y_N", "grammar": {"productions": ["<S>->[N] <n> <T_N>", "<T_i>-><T_i-1> <n> x_i <s> y_i", "<T_1>->x_1 <s> y_1"], "constraints": ["2<=N<=50", "0<=x_i<=1000", "0<=y_i<=1000"]}}
{"name": "1270_A. Card Game", "description": "Two players decided to play one interesting card game.\n\nThere is a deck of n cards, with values from 1 to n. The values of cards are pairwise different (this means that no two different cards have equal values). At the beginning of the game, the deck is completely distributed between players such that each player has at least one card. \n\nThe game goes as follows: on each turn, each player chooses one of their cards (whichever they want) and puts on the table, so that the other player doesn't see which card they chose. After that, both cards are revealed, and the player, value of whose card was larger, takes both cards in his hand. Note that as all cards have different values, one of the cards will be strictly larger than the other one. Every card may be played any amount of times. The player loses if he doesn't have any cards.\n\nFor example, suppose that n = 5, the first player has cards with values 2 and 3, and the second player has cards with values 1, 4, 5. Then one possible flow of the game is:\n\n  * The first player chooses the card 3. The second player chooses the card 1. As 3>1, the first player gets both cards. Now the first player has cards 1, 2, 3, the second player has cards 4, 5.\n\n  * The first player chooses the card 3. The second player chooses the card 4. As 3<4, the second player gets both cards. Now the first player has cards 1, 2. The second player has cards 3, 4, 5.\n\n  * The first player chooses the card 1. The second player chooses the card 3. As 1<3, the second player gets both cards. Now the first player has only the card 2. The second player has cards 1, 3, 4, 5.\n\n  * The first player chooses the card 2. The second player chooses the card 4. As 2<4, the second player gets both cards. Now the first player is out of cards and loses. Therefore, the second player wins.\n\n\n\n\nWho will win if both players are playing optimally? It can be shown that one of the players has a winning strategy.\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 100). The description of the test cases follows.\n\nThe first line of each test case contains three integers n, k_1, k_2 (2 \u2264 n \u2264 100, 1 \u2264 k_1 \u2264 n - 1, 1 \u2264 k_2 \u2264 n - 1, k_1 + k_2 = n) \u2014 the number of cards, number of cards owned by the first player and second player correspondingly.\n\nThe second line of each test case contains k_1 integers a_1, ..., a_{k_1} (1 \u2264 a_i \u2264 n) \u2014 the values of cards of the first player.\n\nThe third line of each test case contains k_2 integers b_1, ..., b_{k_2} (1 \u2264 b_i \u2264 n) \u2014 the values of cards of the second player.\n\nIt is guaranteed that the values of all cards are different.", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> n <s> [k1] <s> [k2] <n> <L_k1> <n> <Z_k2>", "<T_1>->n <s> [k1] <s> [k2] <n> <L_k1> <n> <Z_k2>", "<L_i>-><L_i-1> <s> a_i", "<L_1>->a_1", "<Z_i>-><Z_i-1> <s> b_i", "<Z_1>->b_1"], "constraints": ["1<=t<=100", "2<=n<=100", "1<=k1<=n-1", "1<=k2<=n-1", "k1+k2=n", "1<=a_i<=n", "1<=b_i<=n"]}}
{"name": "p03544 AtCoder Beginner Contest 079 - Lucas Number", "description": "It is November 18 now in Japan. By the way, 11 and 18 are adjacent Lucas numbers.\n\nYou are given an integer N. Find the N-th Lucas number.\n\nHere, the i-th Lucas number L_i is defined as follows:\n\n* L_0=2\n* L_1=1\n* L_i=L_{i-1}+L_{i-2} (i\u22652)\n\nConstraints\n\n* 1\u2264N\u226486\n* It is guaranteed that the answer is less than 10^{18}.\n* N is an integer.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN", "grammar": {"productions": ["<S>->N"], "constraints": ["1<=N<=86"]}}
{"name": "750_A. New Year and Hurry", "description": "Limak is going to participate in a contest on the last day of the 2016. The contest will start at 20:00 and will last four hours, exactly until midnight. There will be n problems, sorted by difficulty, i.e. problem 1 is the easiest and problem n is the hardest. Limak knows it will take him 5\u00b7i minutes to solve the i-th problem.\n\nLimak's friends organize a New Year's Eve party and Limak wants to be there at midnight or earlier. He needs k minutes to get there from his house, where he will participate in the contest first.\n\nHow many problems can Limak solve if he wants to make it to the party?\n\nInput\n\nThe only line of the input contains two integers n and k (1 \u2264 n \u2264 10, 1 \u2264 k \u2264 240) \u2014 the number of the problems in the contest and the number of minutes Limak needs to get to the party from his house.", "grammar": {"productions": ["<S>->n <s> k"], "constraints": ["1<=n<=10", "1<=k<=240"]}}
{"name": "1256_B. Minimize the Permutation", "description": "You are given a permutation of length n. Recall that the permutation is an array consisting of n distinct integers from 1 to n in arbitrary order. For example, [2, 3, 1, 5, 4] is a permutation, but [1, 2, 2] is not a permutation (2 appears twice in the array) and [1, 3, 4] is also not a permutation (n=3 but there is 4 in the array).\n\nYou can perform at most n-1 operations with the given permutation (it is possible that you don't perform any operations at all). The i-th operation allows you to swap elements of the given permutation on positions i and i+1. Each operation can be performed at most once. The operations can be performed in arbitrary order.\n\nYour task is to find the lexicographically minimum possible permutation obtained by performing some of the given operations in some order.\n\nYou can see the definition of the lexicographical order in the notes section.\n\nYou have to answer q independent test cases.\n\nFor example, let's consider the permutation [5, 4, 1, 3, 2]. The minimum possible permutation we can obtain is [1, 5, 2, 4, 3] and we can do it in the following way:\n\n  1. perform the second operation (swap the second and the third elements) and obtain the permutation [5, 1, 4, 3, 2]; \n  2. perform the fourth operation (swap the fourth and the fifth elements) and obtain the permutation [5, 1, 4, 2, 3]; \n  3. perform the third operation (swap the third and the fourth elements) and obtain the permutation [5, 1, 2, 4, 3]. \n  4. perform the first operation (swap the first and the second elements) and obtain the permutation [1, 5, 2, 4, 3]; \n\n\n\nAnother example is [1, 2, 4, 3]. The minimum possible permutation we can obtain is [1, 2, 3, 4] by performing the third operation (swap the third and the fourth elements).\n\nInput\n\nThe first line of the input contains one integer q (1 \u2264 q \u2264 100) \u2014 the number of test cases. Then q test cases follow.\n\nThe first line of the test case contains one integer n (1 \u2264 n \u2264 100) \u2014 the number of elements in the permutation.\n\nThe second line of the test case contains n distinct integers from 1 to n \u2014 the given permutation.", "grammar": {"productions": ["<S>->[q] <n> <T_q>", "<T_i>-><T_i-1> <n> [n] <n> <L_n>", "<T_1>->[n] <n> <L_n>", "<L_i>-><L_i-1> <s> h_i", "<L_1>->h_1"], "constraints": ["1<=q<=100", "1<=n<=100", "1<=h_i<=n"]}}
{"name": "510_A. Fox And Snake", "description": "Input\n\nThe only line contains two integers: n and m (3 <= n, m <= 50). \n\nn is an odd number.", "grammar": {"productions": ["<S>->n <s> m"], "constraints": ["3<=n<=50", "3<=m<=50", "n%2==1"]}}
{"name": "p03037 AtCoder Beginner Contest 127 - Prison", "description": "We have N ID cards, and there are M gates.\n\nWe can pass the i-th gate if we have one of the following ID cards: the L_i-th, (L_i+1)-th, ..., and R_i-th ID cards.\n\nHow many of the ID cards allow us to pass all the gates alone?\n\nConstraints\n\n* All values in input are integers.\n* 1 \\leq N \\leq 10^5\n* 1 \\leq M \\leq 10^5\n* 1 \\leq L_i \\leq R_i \\leq N\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN M\nL_1 R_1\nL_2 R_2\n\\vdots\nL_M R_M", "grammar": {"productions": ["<S>->N <s> [M] <n> <T_M>", "<T_i>-><T_i-1> <n> L_i <s> R_i", "<T_1>->L_1 <s> R_1"], "constraints": ["1<=N<=10^5", "1<=M<=10^5", "1<=L_i<=R_i<=N"]}}
{"name": "514_B. Han Solo and Lazer Gun", "description": "There are n Imperial stormtroopers on the field. The battle field is a plane with Cartesian coordinate system. Each stormtrooper is associated with his coordinates (x, y) on this plane. \n\nHan Solo has the newest duplex lazer gun to fight these stormtroopers. It is situated at the point (x0, y0). In one shot it can can destroy all the stormtroopers, situated on some line that crosses point (x0, y0).\n\nYour task is to determine what minimum number of shots Han Solo needs to defeat all the stormtroopers.\n\nThe gun is the newest invention, it shoots very quickly and even after a very large number of shots the stormtroopers don't have enough time to realize what's happening and change their location. \n\nInput\n\nThe first line contains three integers n, x0 \u0438 y0 (1 \u2264 n \u2264 1000,  - 10^4 \u2264 x0, y0 \u2264 10^4) \u2014 the number of stormtroopers on the battle field and the coordinates of your gun.\n\nNext n lines contain two integers each xi, yi ( - 10^4 \u2264 xi, yi \u2264 10^4) \u2014 the coordinates of the stormtroopers on the battlefield. It is guaranteed that no stormtrooper stands at the same point with the gun. Multiple stormtroopers can stand at the same point.", "grammar": {"productions": ["<S>->[n] <s> x0 <s> y0 <n> <T_n>", "<T_i>-><T_i-1> <n> x_i <s> y_i", "<T_1>->x_1 <s> y_1"], "constraints": ["1<=n<=1000", "-10^4<=x0<=10^4", "-10^4<=y0<=10^4", "-10^4<=x_i<=10^4", "-10^4<=y_i<=10^4"]}}
{"name": "337_C. Quiz", "description": "Input\n\nThe single line contains three space-separated integers n, m and k (2 <= k <= n <= 109; 0 <= m <= n).", "grammar": {"productions": ["<S>->n <s> m <s> k"], "constraints": ["2<=k<=n<=10^9", "0<=m<=n"]}}
{"name": "p02641 AtCoder Beginner Contest 170 - Forbidden List", "description": "Given are an integer X and an integer sequence of length N: p_1, \\ldots, p_N.\n\nAmong the integers not contained in the sequence p_1, \\ldots, p_N (not necessarily positive), find the integer nearest to X, that is, find the integer whose absolute difference with X is the minimum. If there are multiple such integers, report the smallest such integer.\n\nConstraints\n\n* 1 \\leq X \\leq 100\n* 0 \\leq N \\leq 100\n* 1 \\leq p_i \\leq 100\n* p_1, \\ldots, p_N are all distinct.\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nX N\np_1 ... p_N", "grammar": {"productions": ["<S>->X <s> [N] <n> <T_N>", "<T_i>-><T_i-1> <s> p_i", "<T_1>->p_1", "<T_0>->\u03b5"], "constraints": ["1<=X<=100", "0<=N<=100", "1<=p_i<=100", "p_i!=p_j"]}}
{"name": "258_A. Little Elephant and Bits", "description": "Input\n\nThe single line contains integer a, written in the binary notation without leading zeroes. This number contains more than 1 and at most 105 digits.", "grammar": {"productions": ["<S>->[0-1]{1,10^4}"], "constraints": [""]}}
{"name": "262_C. Maxim and Discounts", "description": "Input\n\nThe first line contains integer m (1 <= m <= 105) --- the number of discount types. The second line contains m integers: q1, q2, ..., qm (1 <= qi <= 105). \n\nThe third line contains integer n (1 <= n <= 105) --- the number of items Maxim needs. The fourth line contains n integers: a1, a2, ..., an (1 <= ai <= 104) --- the items' prices.\n\nThe numbers in the lines are separated by single spaces.", "grammar": {"productions": ["<S>->[m] <n> <T_m> <n> [n] <n> <L_n>", "<T_i>-><T_i-1> <s> q_i", "<T_1>->q_1", "<L_i>-><L_i-1> <s> a_i", "<L_1>->a_1"], "constraints": ["1<=m<=10^5", "1<=q_i<=10^5", "1<=n<=10^5", "1<=a_i<=10^4"]}}
{"name": "963_B. Destruction of a Tree", "description": "Input\n\nThe first line contains integer n (1 <= n <= 2\u00b7105) --- number of vertices in a tree.\n\nThe second line contains n integers p1, p2, ..., pn (0 <= pi <= n). If pi != 0 there is an edge between vertices i and pi. It is guaranteed that the given graph is a tree.", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <s> p_i", "<T_1>->p_1"], "constraints": ["1<=n<=2*10^5", "0<=p_i<=n"]}}
{"name": "p03371 AtCoder Beginner Contest 095 - Half and Half", "description": "Constraints\n\n* 1 <= A, B, C <= 5000\n* 1 <= X, Y <= 10^5\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nA B C X Y", "grammar": {"productions": ["<S>->A <s> B <s> C <s> X <s> Y"], "constraints": ["1<=A,B,C<=5000", "1<=X,Y<=10^5"]}}
{"name": "1433_D. Districts Connection", "description": "There are n districts in the town, the i-th district belongs to the a_i-th bandit gang. Initially, no districts are connected to each other.\n\nYou are the mayor of the city and want to build n-1 two-way roads to connect all districts (two districts can be connected directly or through other connected districts).\n\nIf two districts belonging to the same gang are connected directly with a road, this gang will revolt.\n\nYou don't want this so your task is to build n-1 two-way roads in such a way that all districts are reachable from each other (possibly, using intermediate districts) and each pair of directly connected districts belong to different gangs, or determine that it is impossible to build n-1 roads to satisfy all the conditions.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 500) \u2014 the number of test cases. Then t test cases follow.\n\nThe first line of the test case contains one integer n (2 \u2264 n \u2264 5000) \u2014 the number of districts. The second line of the test case contains n integers a_1, a_2, \u2026, a_n (1 \u2264 a_i \u2264 10^9), where a_i is the gang the i-th district belongs to.\n\nIt is guaranteed that the sum of n does not exceed 5000 (\u2211 n \u2264 5000).", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> [n] <n> <L_n>", "<T_1>->[n] <n> <L_n>", "<L_i>-><L_i-1> <s> a_i", "<L_1>->a_1"], "constraints": ["1<=t<=500", "2<=n<=5000", "1<=a_i<=10^9"]}}
{"name": "253_A. Boys and Girls", "description": "Input\n\nThe single line of the input contains two integers n and m (1 <= n, m <= 100), separated by a space.", "grammar": {"productions": ["<S>->n <s> m"], "constraints": ["1<=n<=100", "1<=m<=100"]}}
{"name": "p02622 AtCoder Beginner Contest 172 - Minor Change", "description": "Given are strings S and T. Consider changing S to T by repeating the operation below. Find the minimum number of operations required to do so.\n\nOperation: Choose one character of S and replace it with a different character.\n\nConstraints\n\n* S and T have lengths between 1 and 2\\times 10^5 (inclusive).\n* S and T consists of lowercase English letters.\n* S and T have equal lengths.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nS\nT", "grammar": {"productions": ["<S>->[a-z]{1,2*10^5} <n> [a-z]{1,2*10^5}"], "constraints": []}}
{"name": "p03325 AtCoder Beginner Contest 100 - *3 or /2", "description": "As AtCoder Beginner Contest 100 is taking place, the office of AtCoder, Inc. is decorated with a sequence of length N, a = {a_1, a_2, a_3, ..., a_N}.\nSnuke, an employee, would like to play with this sequence.\n\nSpecifically, he would like to repeat the following operation as many times as possible:\n\n\nFor every i satisfying 1 \\leq i \\leq N, perform one of the following: \"divide a_i by 2\" and \"multiply a_i by 3\".\nHere, choosing \"multiply a_i by 3\" for every i is not allowed, and the value of a_i after the operation must be an integer.\n\n\nAt most how many operations can be performed?\n\nConstraints\n\n* N is an integer between 1 and 10 \\ 000 (inclusive).\n* a_i is an integer between 1 and 1 \\ 000 \\ 000 \\ 000 (inclusive).\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\na_1 a_2 a_3 ... a_N", "grammar": {"productions": ["<S>->[N] <n> <T_N>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1"], "constraints": ["1<=N<=10000", "1<=a_i<=10^9"]}}
{"name": "682_A. Alyona and Numbers", "description": "Input\n\nThe only line of the input contains two integers n and m (1 <= n, m <= 1 000 000).", "grammar": {"productions": ["<S>->n <s> m"], "constraints": ["1<=n,m<=1000000"]}}
{"name": "p02833 AtCoder Beginner Contest 148 - Double Factorial", "description": "For an integer n not less than 0, let us define f(n) as follows:\n\n* f(n) = 1 (if n < 2)\n* f(n) = n f(n-2) (if n \\geq 2)\n\n\n\nGiven is an integer N. Find the number of trailing zeros in the decimal notation of f(N).\n\nConstraints\n\n* 0 \\leq N \\leq 10^{18}\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN", "grammar": {"productions": ["<S>->N"], "constraints": ["0<=N<=10^18"]}}
{"name": "626_B. Cards", "description": "Input\n\nThe first line of the input contains a single integer n (1 <= n <= 200) --- the total number of cards.\n\nThe next line contains a string s of length n --- the colors of the cards. s contains only the characters 'B', 'G', and 'R', representing blue, green, and red, respectively.", "grammar": {"productions": ["<S>->[n] <n> [BGR]{n}"], "constraints": ["1<=n<=200"]}}
{"name": "1201_A. Important Exam", "description": "A class of students wrote a multiple-choice test.\n\nThere are n students in the class. The test had m questions, each of them had 5 possible answers (A, B, C, D or E). There is exactly one correct answer for each question. The correct answer for question i worth a_i points. Incorrect answers are graded with zero points.\n\nThe students remember what answers they gave on the exam, but they don't know what are the correct answers. They are very optimistic, so they want to know what is the maximum possible total score of all students in the class. \n\nInput\n\nThe first line contains integers n and m (1 \u2264 n, m \u2264 1000) \u2014 the number of students in the class and the number of questions in the test.\n\nEach of the next n lines contains string s_i (|s_i| = m), describing an answer of the i-th student. The j-th character represents the student answer (A, B, C, D or E) on the j-th question.\n\nThe last line contains m integers a_1, a_2, \u2026, a_m (1 \u2264 a_i \u2264 1000) \u2014 the number of points for the correct answer for every question.", "grammar": {"productions": ["<S>->[n] <s> [m] <n> <T_n> <n> <L_m>", "<T_i>-><T_i-1> <n> [ABCDE]{m}", "<T_1>->[ABCDE]{m}", "<L_i>-><L_i-1> <s> a_i", "<L_1>->a_1"], "constraints": ["1<=n<=1000", "1<=m<=1000", "1<=a_i<=1000"]}}
{"name": "915_A. Garden", "description": "Luba thinks about watering her garden. The garden can be represented as a segment of length k. Luba has got n buckets, the i-th bucket allows her to water some continuous subsegment of garden of length exactly ai each hour. Luba can't water any parts of the garden that were already watered, also she can't water the ground outside the garden.\n\nLuba has to choose one of the buckets in order to water the garden as fast as possible (as mentioned above, each hour she will water some continuous subsegment of length ai if she chooses the i-th bucket). Help her to determine the minimum number of hours she has to spend watering the garden. It is guaranteed that Luba can always choose a bucket so it is possible water the garden.\n\nSee the examples for better understanding.\n\nInput\n\nThe first line of input contains two integer numbers n and k (1 \u2264 n, k \u2264 100) \u2014 the number of buckets and the length of the garden, respectively.\n\nThe second line of input contains n integer numbers ai (1 \u2264 ai \u2264 100) \u2014 the length of the segment that can be watered by the i-th bucket in one hour.\n\nIt is guaranteed that there is at least one bucket such that it is possible to water the garden in integer number of hours using only this bucket.", "grammar": {"productions": ["<S>->[N] <s> k <n> <T_N>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1"], "constraints": ["1<=a_i<=100", "1<=N<=100", "1<=k<=100", "1<=a_i<=100"]}}
{"name": "1332_A. Exercising Walk", "description": "Alice has a cute cat. To keep her cat fit, Alice wants to design an exercising walk for her cat! \n\nInitially, Alice's cat is located in a cell (x,y) of an infinite grid. According to Alice's theory, cat needs to move: \n\n  * exactly a steps left: from (u,v) to (u-1,v); \n  * exactly b steps right: from (u,v) to (u+1,v); \n  * exactly c steps down: from (u,v) to (u,v-1); \n  * exactly d steps up: from (u,v) to (u,v+1). \n\n\n\nNote that the moves can be performed in an arbitrary order. For example, if the cat has to move 1 step left, 3 steps right and 2 steps down, then the walk right, down, left, right, right, down is valid.\n\nAlice, however, is worrying that her cat might get lost if it moves far away from her. So she hopes that her cat is always in the area [x_1,x_2]\u00d7 [y_1,y_2], i.e. for every cat's position (u,v) of a walk x_1 \u2264 u \u2264 x_2 and y_1 \u2264 v \u2264 y_2 holds.\n\nAlso, note that the cat can visit the same cell multiple times.\n\nCan you help Alice find out if there exists a walk satisfying her wishes?\n\nFormally, the walk should contain exactly a+b+c+d unit moves (a to the left, b to the right, c to the down, d to the up). Alice can do the moves in any order. Her current position (u, v) should always satisfy the constraints: x_1 \u2264 u \u2264 x_2, y_1 \u2264 v \u2264 y_2. The staring point is (x, y).\n\nYou are required to answer t test cases independently.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^3) \u2014 the number of testcases. \n\nThe first line of each test case contains four integers a, b, c, d (0 \u2264 a,b,c,d \u2264 10^8, a+b+c+d \u2265 1).\n\nThe second line of the test case contains six integers x, y, x_1, y_1, x_2, y_2 (-10^8 \u2264 x_1\u2264 x \u2264 x_2 \u2264 10^8, -10^8 \u2264 y_1 \u2264 y \u2264 y_2 \u2264 10^8).", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> a <s> b <s> c <s> d <n> x <s> y <s> x1 <s> y1 <s> x2 <s> y2", "<T_1>->a <s> b <s> c <s> d <n> x <s> y <s> x1 <s> y1 <s> x2 <s> y2"], "constraints": ["1<=t<=10^3", "0<=a,b,c,d<=10^8", "-10^8<=x1<=x<=x2<=10^8", "-10^8<=y1<=y<=y2<=10^8"]}}
{"name": "1129_D. Isolation", "description": "Input\n\nThe first line contains two space-separated integers n and k (1 <= k <= n <= 10^5) --- the number of elements in the array a and the restriction from the statement.\n\nThe following line contains n space-separated integers a_1, a_2, ..., a_n (1 <= a_i <= n) --- elements of the array a.", "grammar": {"productions": ["<S>->[n] <s> [k] <n> <T_n>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1"], "constraints": ["1<=k<=n<=10^5", "1<=a_i<=n"]}}
{"name": "p01556 ConvexCut", "description": "Constraints\n\n* All inputs are integers\n\n* 3 <= N <= 50\n\n* 0 <= | Xi |, | Yi | <= 1000000\n\n* The input polygon is a simple convex polygon.\n\n* The output must satisfy max (| X-cX |, | Y-cY |) <= 0.0001 when the output coordinates are (X, Y) and the exact solution is (cX, cY).\n\nInput\n\nThe input is given in the following format.\n\n> N\n> X1 Y1\n> X2 Y2\n> ......\n> XN YN\n>", "grammar": {"productions": ["<S>->[N] <n> <T_N>", "<T_i>-><T_i-1> <n> Xi <s> Yi", "<T_1>->Xi <s> Yi"], "constraints": ["3<=N<=50", "0<=Xi,Yi<=1000000"]}}
{"name": "p03637 AtCoder Beginner Contest 069 - 4-adjacent", "description": "Constraints\n\n* 2 <= N <= 10^5\n* a_i is an integer.\n* 1 <= a_i <= 10^9\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\na_1 a_2 ... a_N", "grammar": {"productions": ["<S>->[N] <n> <T_N>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1"], "constraints": ["2<=N<=10^5", "1<=a_i<=10^9"]}}
{"name": "1281_B. Azamon Web Services", "description": "Input\n\nThe first line of input contains a single integer t (1 <= t <= 1500) denoting the number of test cases. The next lines contain descriptions of the test cases.\n\nEach test case consists of a single line containing two space-separated strings s and c (2 <= |s| <= 5000, 1 <= |c| <= 5000). The strings s and c consists of uppercase English letters.\n\nIt is guaranteed that the sum of |s| in the input is at most 5000 and the sum of the |c| in the input is at most 5000.", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> [A-Z]{2,5000} <s> [A-Z]{1,5000}", "<T_1>->[A-Z]{2,5000} <s> [A-Z]{1,5000}"], "constraints": ["1<=t<=1500"]}}
{"name": "514_A. Chewbaсca and Number", "description": "Input\n\nThe first line contains a single integer x (1 <= x <=10^18) --- the number that Luke Skywalker gave to Chewbacca.", "grammar": {"productions": ["<S>->x"], "constraints": ["1<=x<=10^18"]}}
{"name": "1358_C. Celex Update", "description": "During the quarantine, Sicromoft has more free time to create the new functions in \"Celex-2021\". The developers made a new function GAZ-GIZ, which infinitely fills an infinite table to the right and down from the upper left corner as follows:\n\n<image> The cell with coordinates (x, y) is at the intersection of x-th row and y-th column. Upper left cell (1,1) contains an integer 1.\n\nThe developers of the SUM function don't sleep either. Because of the boredom, they teamed up with the developers of the RAND function, so they added the ability to calculate the sum on an arbitrary path from one cell to another, moving down or right. Formally, from the cell (x,y) in one step you can move to the cell (x+1, y) or (x, y+1). \n\nAfter another Dinwows update, Levian started to study \"Celex-2021\" (because he wants to be an accountant!). After filling in the table with the GAZ-GIZ function, he asked you to calculate the quantity of possible different amounts on the path from a given cell (x_1, y_1) to another given cell (x_2, y_2), if you can only move one cell down or right.\n\nFormally, consider all the paths from the cell (x_1, y_1) to cell (x_2, y_2) such that each next cell in the path is located either to the down or to the right of the previous one. Calculate the number of different sums of elements for all such paths.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 57179) \u2014 the number of test cases.\n\nEach of the following t lines contains four natural numbers x_1, y_1, x_2, y_2 (1 \u2264 x_1 \u2264 x_2 \u2264 10^9, 1 \u2264 y_1 \u2264 y_2 \u2264 10^9) \u2014 coordinates of the start and the end cells.", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> x1 <s> y1 <s> x2 <s> y2", "<T_1>->x1 <s> y1 <s> x2 <s> y2"], "constraints": ["1<=t<=57179", "1<=x1<=x2<=10^9", "1<=y1<=y2<=10^9"]}}
{"name": "1255_A. Changing Volume", "description": "Input\n\nEach test contains multiple test cases. The first line contains the number of test cases T (1 <= T <= 1 000). Then the descriptions of the test cases follow.\n\nEach test case consists of one line containing two integers a and b (0 <= a, b <= 10^{9}) --- the current volume and Bob's desired volume, respectively.", "grammar": {"productions": ["<S>->[T] <n> <T_T>", "<T_i>-><T_i-1> <n> a <s> b", "<T_1>->a <s> b"], "constraints": ["1<=T<=1000", "0<=a,b<=10^9"]}}
{"name": "1455_C. Ping-pong", "description": "Input\n\nThe first line contains a single integer t (1 <= t <= 10^4) --- the number of test cases.\n\nThe first and only line of each test case contains two integers x and y (1 <= x, y <= 10^6) --- Alice's and Bob's initial stamina.", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> x <s> y", "<T_1>->x <s> y"], "constraints": ["1<=t<=10^4", "1<=x,y<=10^6"]}}
{"name": "p03166 Educational DP Contest - Longest Path", "description": "Constraints\n\n* All values in input are integers.\n* 2 <= N <= 10^5\n* 1 <= M <= 10^5\n* 1 <= x_i, y_i <= N\n* All pairs (x_i, y_i) are distinct.\n* G does not contain directed cycles.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN M\nx_1 y_1\nx_2 y_2\n:\nx_M y_M", "grammar": {"productions": ["<S>->[N] <s> [M] <n> <T_M>", "<T_i>-><T_i-1> <n> x_i <s> y_i", "<T_1>->x_i <s> y_i"], "constraints": ["2<=N<=10^5", "1<=M<=10^5", "1<=x_i,y_i<=N"]}}
{"name": "1091_A. New Year and the Christmas Ornament", "description": "Alice and Bob are decorating a Christmas Tree. \n\nAlice wants only 3 types of ornaments to be used on the Christmas Tree: yellow, blue and red. They have y yellow ornaments, b blue ornaments and r red ornaments.\n\nIn Bob's opinion, a Christmas Tree will be beautiful if:\n\n  * the number of blue ornaments used is greater by exactly 1 than the number of yellow ornaments, and \n  * the number of red ornaments used is greater by exactly 1 than the number of blue ornaments. \n\n\n\nThat is, if they have 8 yellow ornaments, 13 blue ornaments and 9 red ornaments, we can choose 4 yellow, 5 blue and 6 red ornaments (5=4+1 and 6=5+1).\n\nAlice wants to choose as many ornaments as possible, but she also wants the Christmas Tree to be beautiful according to Bob's opinion.\n\nIn the example two paragraphs above, we would choose 7 yellow, 8 blue and 9 red ornaments. If we do it, we will use 7+8+9=24 ornaments. That is the maximum number.\n\nSince Alice and Bob are busy with preparing food to the New Year's Eve, they are asking you to find out the maximum number of ornaments that can be used in their beautiful Christmas Tree! \n\nIt is guaranteed that it is possible to choose at least 6 (1+2+3=6) ornaments.\n\nInput\n\nThe only line contains three integers y, b, r (1 \u2264 y \u2264 100, 2 \u2264 b \u2264 100, 3 \u2264 r \u2264 100) \u2014 the number of yellow, blue and red ornaments. \n\nIt is guaranteed that it is possible to choose at least 6 (1+2+3=6) ornaments.", "grammar": {"productions": ["<S>->y <s> b <s> r"], "constraints": ["1<=y<=100", "2<=b<=100", "3<=r<=100"]}}
{"name": "801_A. Vicious Keyboard", "description": "Input\n\nThe first line will contain a string s consisting only of uppercase English letters \"V\" and \"K\" with length not less than 1 and not greater than 100.", "grammar": {"productions": ["<S>->[VK]{1,100}"], "constraints": [""]}}
{"name": "1351_A. A+B (Trial Problem)", "description": "Input\n\nThe first line contains an integer t (1 <= t <= 10^4) --- the number of test cases in the input. Then t test cases follow.\n\nEach test case is given as a line of two integers a and b (-1000 <= a, b <= 1000).", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> a <s> b", "<T_1>->a <s> b"], "constraints": ["1<=t<=10000", "-1000<=a,b<=1000"]}}
{"name": "385_B. Bear and Strings", "description": "Input\n\nThe first line contains a non-empty string s (1 <= |s| <= 5000). It is guaranteed that the string only consists of lowercase English letters.", "grammar": {"productions": ["<S>->[a-z]{1,5000}"], "constraints": ["1<=|s|<=5000"]}}
{"name": "886_A. ACM ICPC", "description": "Input\n\nThe single line contains six integers a1, ..., a6 (0 <= ai <= 1000) --- scores of the participants", "grammar": {"productions": ["<S>->a1 <s> a2 <s> a3 <s> a4 <s> a5 <s> a6"], "constraints": ["0<=a1,a2,a3,a4,a5,a6<=1000"]}}
{"name": "546_A. Soldier and Bananas", "description": "A soldier wants to buy w bananas in the shop. He has to pay k dollars for the first banana, 2k dollars for the second one and so on (in other words, he has to pay i\u00b7k dollars for the i-th banana). \n\nHe has n dollars. How many dollars does he have to borrow from his friend soldier to buy w bananas?\n\nInput\n\nThe first line contains three positive integers k, n, w (1 \u2264 k, w \u2264 1000, 0 \u2264 n \u2264 10^9), the cost of the first banana, initial number of dollars the soldier has and number of bananas he wants.", "grammar": {"productions": ["<S>->K <s> N <s> W"], "constraints": ["1<=K<=1000", "1<=W<=1000", "0<=N<=10^9"]}}
{"name": "1175_E. Minimal Segment Cover", "description": "Input\n\nThe first line contains two integers n and m (1 <= n, m <= 2 * 10^5) --- the number of intervals and the number of queries, respectively.\n\nEach of the next n lines contains two integer numbers l_i and r_i (0 <= l_i < r_i <= 5 * 10^5) --- the given intervals.\n\nEach of the next m lines contains two integer numbers x_i and y_i (0 <= x_i < y_i <= 5 * 10^5) --- the queries.", "grammar": {"productions": ["<S>->[n] <s> [m] <n> <T_n> <n> <L_m>", "<T_i>-><T_i-1> <n> l_i <s> r_i", "<T_1>->l_1 <s> r_1", "<L_i>-><L_i-1> <n> x_i <s> y_i", "<L_1>->x_1 <s> y_1"], "constraints": ["1<=n,m<=2*10^5", "0<=l_i<r_i<=5*10^5", "0<=x_i<y_i<=5*10^5"]}}
{"name": "p02633 AtCoder Grand Contest 046 - Takahashikun  The Strider", "description": "Takahashi is standing on a two-dimensional plane, facing north. Find the minimum positive integer K such that Takahashi will be at the starting position again after he does the following action K times:\n\n* Go one meter in the direction he is facing. Then, turn X degrees counter-clockwise.\n\nConstraints\n\n* 1 \\leq X \\leq 179\n* X is an integer.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nX", "grammar": {"productions": ["<S>->X"], "constraints": ["1<=X<=179"]}}
{"name": "p02583 AtCoder Beginner Contest 175 - Making Triangle", "description": "We have sticks numbered 1, \\cdots, N. The length of Stick i (1 \\leq i \\leq N) is L_i.\n\nIn how many ways can we choose three of the sticks with different lengths that can form a triangle?\n\nThat is, find the number of triples of integers (i, j, k) (1 \\leq i < j < k \\leq N) that satisfy both of the following conditions:\n\n* L_i, L_j, and L_k are all different.\n* There exists a triangle whose sides have lengths L_i, L_j, and L_k.\n\nConstraints\n\n* 1 \\leq N \\leq 100\n* 1 \\leq L_i \\leq 10^9\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\nL_1 L_2 \\cdots L_N", "grammar": {"productions": ["<S>->[N] <n> <T_N>", "<T_i>-><T_i-1> <s> L_i", "<T_1>->L_1"], "constraints": ["1<=N<=100", "1<=L_i<=10^9"]}}
{"name": "p02579 AtCoder Beginner Contest 176 - Wizard in Maze", "description": "A maze is composed of a grid of H \\times W squares - H vertical, W horizontal.\n\nThe square at the i-th row from the top and the j-th column from the left - (i,j) - is a wall if S_{ij} is `#` and a road if S_{ij} is `.`.\n\nThere is a magician in (C_h,C_w). He can do the following two kinds of moves:\n\n* Move A: Walk to a road square that is vertically or horizontally adjacent to the square he is currently in.\n* Move B: Use magic to warp himself to a road square in the 5\\times 5 area centered at the square he is currently in.\n\n\n\nIn either case, he cannot go out of the maze.\n\nAt least how many times does he need to use the magic to reach (D_h, D_w)?\n\nConstraints\n\n* 1 \\leq H,W \\leq 10^3\n* 1 \\leq C_h,D_h \\leq H\n* 1 \\leq C_w,D_w \\leq W\n* S_{ij} is `#` or `.`.\n* S_{C_h C_w} and S_{D_h D_w} are `.`.\n* (C_h,C_w) \\neq (D_h,D_w)\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nH W\nC_h C_w\nD_h D_w\nS_{11}\\ldots S_{1W}\n\\vdots\nS_{H1}\\ldots S_{HW}", "grammar": {"productions": ["<S>->[H] <s> [W] <n> Ch <s> Cw <n> Dh <s> Dw <n> <T_H,W>", "<T_i,j>-><T_i,j-1> <s> S_i,j", "<T_i,1>-><T_i-1,W> <n> S_i,1", "<T_1,1>->S_1,1", "S_i,j->#|."], "constraints": ["1<=H<=10^3", "1<=W<=10^3", "1<=Ch<=H", "1<=Dh<=H", "1<=Cw<=W", "1<=Dw<=W", "S_Ch,Cw=.", "S_Dh,Dw=.", "(Ch,Cw)!=(Dh,Dw)"]}}
{"name": "1276_C. Beautiful Rectangle", "description": "Input\n\nThe first line contains n (1 <= n <= 4*10^5). The second line contains n integers (1 <= a_i <= 10^9).", "grammar": {"productions": ["<S>->[n] <n> <T_n>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_i"], "constraints": ["1<=n<=4*10^5", "1<=a_i<=10^9"]}}
{"name": "855_D. Rowena Ravenclaw's Diadem", "description": "Input\n\nFirst line of input contains the number n (1 <= n <= 105), the number of objects. \n\nNext n lines contain two integer parenti and typei ( - 1 <= parenti < i parenti != 0,  - 1 <= typei <= 1), implying that the i-th object has the parent parenti. (If typei = 0, this implies that the object i is a special case of object parenti. If typei = 1, this implies that the object i is a part of object parenti). In case the i-th object has no parent, both parenti and typei are -1.\n\nNext line contains an integer q (1 <= q <= 105), the number of queries. \n\nNext q lines each represent a query having three space separated integers typei, ui, vi (1 <= typei <= 2, 1 <= u, v <= n).", "grammar": {"productions": ["<S>->[n] <n> <T_n> <n> q <n> <Z_q>", "<T_i>-><T_i-1> <n> parent_i <s> type_i", "<T_1>->parent_1 <s> type_1", "<Z_i>-><Z_i-1> <n> querytype_i <s> u <s> v", "<Z_1>->querytype_1 <s> u <s> v"], "constraints": ["1<=n<=10^5", "-1<=parent_i<0", "-1<=type_i<=1", "1<=q<=10^5", "1<=querytype_i<=2", "1<=u,v<=n"]}}
{"name": "690_D3. The Wall (hard)", "description": "Input\n\nThe first and the only line of the input contains three space-separated integers C, W and H (1 <= C <= 108, 1 <= W, H <= 100).", "grammar": {"productions": ["<S>->C <s> W <s> H"], "constraints": ["1<=C<=10^8", "1<=W<=100", "1<=H<=100"]}}
{"name": "133_A. HQ9+", "description": "HQ9+ is a joke programming language which has only four one-character instructions:\n\n  * \"H\" prints \"Hello, World!\",\n  * \"Q\" prints the source code of the program itself,\n  * \"9\" prints the lyrics of \"99 Bottles of Beer\" song, \n  * \"+\" increments the value stored in the internal accumulator.\n\n\n\nInstructions \"H\" and \"Q\" are case-sensitive and must be uppercase. The characters of the program which are not instructions are ignored.\n\nYou are given a program written in HQ9+. You have to figure out whether executing this program will produce any output.\n\nInput\n\nThe input will consist of a single line p which will give a program in HQ9+. String p will contain between 1 and 100 characters, inclusive. ASCII-code of each character of p will be between 33 (exclamation mark) and 126 (tilde), inclusive.", "grammar": {"productions": ["<S>->[!-~]{1,100}"], "constraints": []}}
{"name": "552_B. Vanya and Books", "description": "Input\n\nThe first line contains integer n (1 <= n <=10^9) --- the number of books in the library.", "grammar": {"productions": ["<S>->n"], "constraints": ["1<=n<=10^9"]}}
{"name": "p02719 AtCoder Beginner Contest 161 - Replacing Integer", "description": "Given any integer x, Aoki can do the operation below.\n\nOperation: Replace x with the absolute difference of x and K.\n\nYou are given the initial value of an integer N. Find the minimum possible value taken by N after Aoki does the operation zero or more times.\n\nConstraints\n\n* 0 \u2264 N \u2264 10^{18}\n* 1 \u2264 K \u2264 10^{18}\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN K", "grammar": {"productions": ["<S>->N <s> K"], "constraints": ["0<=N<=10^18", "1<=K<=10^18"]}}
{"name": "1427_C. The Hard Work of Paparazzi", "description": "Input\n\nThe first line of the input contains two positive integers r, n (1<= r<= 500, 1<= n<= 100,000) -- the number of south-to-north/west-to-east streets and the number of celebrities.\n\nThen n lines follow, each describing the appearance of a celebrity. The i-th of these lines contains 3 positive integers t_i, x_i, y_i (1<= t_i<= 1,000,000, 1<= x_i, y_i<= r) --- denoting that the i-th celebrity will appear at the intersection (x_i, y_i) in t_i minutes from now.\n\nIt is guaranteed that t_i<t_{i+1} for any i=1,2,..., n-1.", "grammar": {"productions": ["<S>->r <s> [n] <n> <T_n>", "<T_i>-><T_i-1> <n> t_i <s> x_i <s> y_i", "<T_1>->t_1 <s> x_1 <s> y_1"], "constraints": ["1<=r<=500", "1<=n<=100000", "1<=t_i<=1000000", "1<=x_i,y_i<=r"]}}
{"name": "1420_D. Rescue Nibel!", "description": "Input\n\nFirst line contains two integers n and k (1 <= n <= 3 * 10^5, 1 <= k <= n) --- total number of lamps and the number of lamps that must be turned on simultaneously.\n\nNext n lines contain two integers l_i ans r_i (1 <= l_i <= r_i <= 10^9) --- period of time when i-th lamp is turned on.", "grammar": {"productions": ["<S>->[n] <s> k <n> <T_n>", "<T_i>-><T_i-1> <n> l_i <s> r_i", "<T_1>->l_1 <s> r_1"], "constraints": ["1<=n<=3*10^5", "1<=k<=n", "1<=l_i<=r_i", "1<=r_i<=10^9"]}}
{"name": "978_C. Letters", "description": "There are n dormitories in Berland State University, they are numbered with integers from 1 to n. Each dormitory consists of rooms, there are a_i rooms in i-th dormitory. The rooms in i-th dormitory are numbered from 1 to a_i.\n\nA postman delivers letters. Sometimes there is no specific dormitory and room number in it on an envelope. Instead of it only a room number among all rooms of all n dormitories is written on an envelope. In this case, assume that all the rooms are numbered from 1 to a_1 + a_2 + ... + a_n and the rooms of the first dormitory go first, the rooms of the second dormitory go after them and so on.\n\nFor example, in case n=2, a_1=3 and a_2=5 an envelope can have any integer from 1 to 8 written on it. If the number 7 is written on an envelope, it means that the letter should be delivered to the room number 4 of the second dormitory.\n\nFor each of m letters by the room number among all n dormitories, determine the particular dormitory and the room number in a dormitory where this letter should be delivered.\n\nInput\n\nThe first line contains two integers n and m (1 \u2264 n, m \u2264 2 \u22c5 10^{5}) \u2014 the number of dormitories and the number of letters.\n\nThe second line contains a sequence a_1, a_2, ..., a_n (1 \u2264 a_i \u2264 10^{10}), where a_i equals to the number of rooms in the i-th dormitory. The third line contains a sequence b_1, b_2, ..., b_m (1 \u2264 b_j \u2264 a_1 + a_2 + ... + a_n), where b_j equals to the room number (among all rooms of all dormitories) for the j-th letter. All b_j are given in increasing order.", "grammar": {"productions": ["<S>->[n] <s> [m] <n> <T_n> <n> <L_m>", "<T_i>-><T_i-1> <s> a_i", "<T_1>->a_1", "<L_i>-><L_i-1> <s> b_i", "<L_1>->b_1"], "constraints": ["1<=n<=2*10^5", "1<=m<=2*10^5", "1<=a_i<=10^10", "1<=b_i<=a_1 + a_2 + ... + a_n"]}}
{"name": "633_B. A Trivial Problem", "description": "Input\n\nThe only line of input contains an integer m (1 <= m <= 100 000) --- the required number of trailing zeroes in factorial.", "grammar": {"productions": ["<S>->m"], "constraints": ["1<=m<=100000"]}}
{"name": "p03145 AtCoder Beginner Contest 116 - Right Triangle", "description": "There is a right triangle ABC with \u2220ABC=90\u00b0.\n\nGiven the lengths of the three sides, |AB|,|BC| and |CA|, find the area of the right triangle ABC.\n\nIt is guaranteed that the area of the triangle ABC is an integer.\n\nConstraints\n\n* 1 \\leq |AB|,|BC|,|CA| \\leq 100\n* All values in input are integers.\n* The area of the triangle ABC is an integer.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\n|AB| |BC| |CA|", "grammar": {"productions": ["<S>->AB <s> BC <s> CA"], "constraints": ["1<=AB,BC,CA<=100"]}}
{"name": "p03243 AtCoder Beginner Contest 111 - AtCoder Beginner Contest 111", "description": "Kurohashi has never participated in AtCoder Beginner Contest (ABC).\n\nThe next ABC to be held is ABC N (the N-th ABC ever held). Kurohashi wants to make his debut in some ABC x such that all the digits of x in base ten are the same.\n\nWhat is the earliest ABC where Kurohashi can make his debut?\n\nConstraints\n\n* 100 \\leq N \\leq 999\n* N is an integer.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN", "grammar": {"productions": ["<S>->N"], "constraints": ["100<=N<=999"]}}
{"name": "602_C. The Two Routes", "description": "Input\n\nThe first line of the input contains two integers n and m (2 <= n <= 400, 0 <= m <= n(n - 1) / 2) --- the number of towns and the number of railways respectively.\n\nEach of the next m lines contains two integers u and v, denoting a railway between towns u and v (1 <= u, v <= n, u != v).\n\nYou may assume that there is at most one railway connecting any two towns.", "grammar": {"productions": ["<S>->[n] <s> [m] <n> <T_m>", "<T_i>-><T_i-1> <n> u <s> v", "<T_1>->u <s> v"], "constraints": ["2<=n<=400", "0<=m<=n*(n-1)/2", "1<=u,v<=n", "u!=v"]}}
{"name": "p03437 AtCoder Petrozavodsk Contest 001 - Two Integers", "description": "You are given positive integers X and Y. If there exists a positive integer not greater than 10^{18} that is a multiple of X but not a multiple of Y, choose one such integer and print it. If it does not exist, print -1.\n\nConstraints\n\n* 1 \u2264 X,Y \u2264 10^9\n* X and Y are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nX Y", "grammar": {"productions": ["<S>->X <s> Y"], "constraints": ["1<=X<=10^9", "1<=Y<=10^9"]}}
{"name": "535_B. Tavas and SaDDas", "description": "Once again Tavas started eating coffee mix without water! Keione told him that it smells awful, but he didn't stop doing that. That's why Keione told his smart friend, SaDDas to punish him! SaDDas took Tavas' headphones and told him: \"If you solve the following problem, I'll return it to you.\"\n\n<image>\n\nThe problem is: \n\nYou are given a lucky number n. Lucky numbers are the positive integers whose decimal representations contain only the lucky digits 4 and 7. For example, numbers 47, 744, 4 are lucky and 5, 17, 467 are not.\n\nIf we sort all lucky numbers in increasing order, what's the 1-based index of n? \n\nTavas is not as smart as SaDDas, so he asked you to do him a favor and solve this problem so he can have his headphones back.\n\nInput\n\nThe first and only line of input contains a lucky number n (1 \u2264 n \u2264 10^9).", "grammar": {"productions": ["<S>->n"], "constraints": ["1<=n<=10^9"]}}
{"name": "1351_B. Square?", "description": "Vasya claims that he had a paper square. He cut it into two rectangular parts using one vertical or horizontal cut. Then Vasya informed you the dimensions of these two rectangular parts. You need to check whether Vasya originally had a square. In other words, check if it is possible to make a square using two given rectangles.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases in the input. Then t test cases follow.\n\nEach test case is given in two lines.\n\nThe first line contains two integers a_1 and b_1 (1 \u2264 a_1, b_1 \u2264 100) \u2014 the dimensions of the first one obtained after cutting rectangle. The sizes are given in random order (that is, it is not known which of the numbers is the width, and which of the numbers is the length).\n\nThe second line contains two integers a_2 and b_2 (1 \u2264 a_2, b_2 \u2264 100) \u2014 the dimensions of the second obtained after cutting rectangle. The sizes are given in random order (that is, it is not known which of the numbers is the width, and which of the numbers is the length).", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> a1 <s> b1 <n> a2 <s> b2", "<T_1>->a1 <s> b1 <n> a2 <s> b2"], "constraints": ["1<=t<=10^4", "1<=a1,b1<=100", "1<=a2,b2<=100"]}}
{"name": "650_B. Image Preview", "description": "Input\n\nThe first line of the input contains 4 integers n, a, b, T (1 <= n <= 5\u00b7105, 1 <= a, b <= 1000, 1 <= T <= 109) --- the number of photos, time to move from a photo to adjacent, time to change orientation of a photo and time Vasya can spend for watching photo.\n\nSecond line of the input contains a string of length n containing symbols 'w' and 'h'. \n\nIf the i-th position of a string contains 'w', then the photo i should be seen in the horizontal orientation.\n\nIf the i-th position of a string contains 'h', then the photo i should be seen in vertical orientation.", "grammar": {"productions": ["<S>->[n] <s> a <s> b <s> T <n> [wh]{n}"], "constraints": ["1<=n<=5*10^5", "1<=a,b<=1000", "1<=T<=10^9"]}}
{"name": "p03605 AtCoder Beginner Contest 073 - September 9", "description": "It is September 9 in Japan now.\n\nYou are given a two-digit integer N. Answer the question: Is 9 contained in the decimal notation of N?\n\nConstraints\n\n* 10\u2264N\u226499\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN", "grammar": {"productions": ["<S>->N"], "constraints": ["10<=N<=99"]}}
{"name": "1263_A. Sweet Problem", "description": "You have three piles of candies: red, green and blue candies:\n\n  * the first pile contains only red candies and there are r candies in it, \n  * the second pile contains only green candies and there are g candies in it, \n  * the third pile contains only blue candies and there are b candies in it. \n\n\n\nEach day Tanya eats exactly two candies of different colors. She is free to choose the colors of eaten candies: the only restriction that she can't eat two candies of the same color in a day.\n\nFind the maximal number of days Tanya can eat candies? Each day she needs to eat exactly two candies.\n\nInput\n\nThe first line contains integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases in the input. Then t test cases follow.\n\nEach test case is given as a separate line of the input. It contains three integers r, g and b (1 \u2264 r, g, b \u2264 10^8) \u2014 the number of red, green and blue candies, respectively.", "grammar": {"productions": ["<S>->[t] <n> <T_t>", "<T_i>-><T_i-1> <n> r <s> g <s> b", "<T_1>->r <s> g <s> b"], "constraints": ["1<=t<=1000", "1<=r<=10^8", "1<=g<=10^8", "1<=b<=10^8"]}}
